
F303MTsplit_x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004abc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d0c  08004d0c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08004d0c  08004d0c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d0c  08004d0c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d10  08004d10  00014d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          0000028c  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f0  200002f0  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e02e  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021ee  00000000  00000000  0002e105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ae0  00000000  00000000  000302f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000869  00000000  00000000  00030dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000205ff  00000000  00000000  00031641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fa70  00000000  00000000  00051c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c138d  00000000  00000000  000616b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000030b0  00000000  00000000  00122a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00125af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c44 	.word	0x08004c44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08004c44 	.word	0x08004c44

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <Button_IRQHandler>:

#include "button.h"

static volatile uint32_t pressCount = 0;

void Button_IRQHandler(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
    static uint32_t lastInterruptTime = 0;
    uint32_t interruptTime = HAL_GetTick();
 80002b6:	f000 fc1d 	bl	8000af4 <HAL_GetTick>
 80002ba:	6078      	str	r0, [r7, #4]

    // If interrupts come faster than 200ms, assume it's a bounce and ignore
    if (interruptTime - lastInterruptTime > 200) {
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <Button_IRQHandler+0x30>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	1ad3      	subs	r3, r2, r3
 80002c4:	2bc8      	cmp	r3, #200	; 0xc8
 80002c6:	d904      	bls.n	80002d2 <Button_IRQHandler+0x22>
        pressCount++;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <Button_IRQHandler+0x34>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <Button_IRQHandler+0x34>)
 80002d0:	6013      	str	r3, [r2, #0]
    }
    lastInterruptTime = interruptTime;
 80002d2:	4a03      	ldr	r2, [pc, #12]	; (80002e0 <Button_IRQHandler+0x30>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000084 	.word	0x20000084
 80002e4:	20000080 	.word	0x20000080

080002e8 <Button_GetPressCount>:

uint32_t Button_GetPressCount(void) {
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
    return pressCount;
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <Button_GetPressCount+0x14>)
 80002ee:	681b      	ldr	r3, [r3, #0]
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000080 	.word	0x20000080

08000300 <LED_On>:
 */


#include "led.h"

void LED_On(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	2120      	movs	r1, #32
 8000308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030c:	f000 ff28 	bl	8001160 <HAL_GPIO_WritePin>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}

08000314 <LED_Off>:

void LED_Off(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2120      	movs	r1, #32
 800031c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000320:	f000 ff1e 	bl	8001160 <HAL_GPIO_WritePin>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}

08000328 <main>:
static void MX_USART2_UART_Init(void);



int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032e:	f000 fb87 	bl	8000a40 <HAL_Init>


  /* Configure the system clock */
  SystemClock_Config();
 8000332:	f000 f83b 	bl	80003ac <SystemClock_Config>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000336:	f000 f905 	bl	8000544 <MX_GPIO_Init>
  MX_I2C1_Init();
 800033a:	f000 f88b 	bl	8000454 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800033e:	f000 f8c9 	bl	80004d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2,rxdata,4);
 8000342:	2204      	movs	r2, #4
 8000344:	4914      	ldr	r1, [pc, #80]	; (8000398 <main+0x70>)
 8000346:	4815      	ldr	r0, [pc, #84]	; (800039c <main+0x74>)
 8000348:	f002 fdec 	bl	8002f24 <HAL_UART_Receive_IT>
	  	    	  	  memset(rxdata, 0, sizeof(rxdata));
	  	  }*/



	  uint32_t currentTime = HAL_GetTick();
 800034c:	f000 fbd2 	bl	8000af4 <HAL_GetTick>
 8000350:	6078      	str	r0, [r7, #4]

	          // Update LED every ledUpdateInterval ms
	          if (currentTime - lastLEDUpdateTime >= ledUpdateInterval) {
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <main+0x78>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	1ad2      	subs	r2, r2, r3
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <main+0x7c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	429a      	cmp	r2, r3
 8000360:	d3f4      	bcc.n	800034c <main+0x24>
	              lastLEDUpdateTime = currentTime;
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <main+0x78>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6013      	str	r3, [r2, #0]
	              uint32_t pressCount = Button_GetPressCount();
 8000368:	f7ff ffbe 	bl	80002e8 <Button_GetPressCount>
 800036c:	6038      	str	r0, [r7, #0]
	              if (pressCount != 0 && pressCount % 10 == 0) {
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d00e      	beq.n	8000392 <main+0x6a>
 8000374:	6839      	ldr	r1, [r7, #0]
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <main+0x80>)
 8000378:	fba3 2301 	umull	r2, r3, r3, r1
 800037c:	08da      	lsrs	r2, r3, #3
 800037e:	4613      	mov	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	4413      	add	r3, r2
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	1aca      	subs	r2, r1, r3
 8000388:	2a00      	cmp	r2, #0
 800038a:	d102      	bne.n	8000392 <main+0x6a>
	                  LED_On();
 800038c:	f7ff ffb8 	bl	8000300 <LED_On>
 8000390:	e001      	b.n	8000396 <main+0x6e>
	              } else {
	                  LED_Off();
 8000392:	f7ff ffbf 	bl	8000314 <LED_Off>
  {
 8000396:	e7d9      	b.n	800034c <main+0x24>
 8000398:	200000b8 	.word	0x200000b8
 800039c:	20000118 	.word	0x20000118
 80003a0:	20000000 	.word	0x20000000
 80003a4:	20000004 	.word	0x20000004
 80003a8:	cccccccd 	.word	0xcccccccd

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b0a6      	sub	sp, #152	; 0x98
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003b6:	2228      	movs	r2, #40	; 0x28
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f003 ffbe 	bl	800433c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2258      	movs	r2, #88	; 0x58
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f003 ffb0 	bl	800433c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003dc:	2302      	movs	r3, #2
 80003de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e0:	2301      	movs	r3, #1
 80003e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e4:	2310      	movs	r3, #16
 80003e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ea:	2300      	movs	r3, #0
 80003ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 f815 	bl	8001424 <HAL_RCC_OscConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000400:	f000 f9b6 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000404:	230f      	movs	r3, #15
 8000406:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000408:	2300      	movs	r3, #0
 800040a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000418:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f002 f854 	bl	80024cc <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800042a:	f000 f9a1 	bl	8000770 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800042e:	2322      	movs	r3, #34	; 0x22
 8000430:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000436:	2300      	movs	r3, #0
 8000438:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4618      	mov	r0, r3
 800043e:	f002 fa7b 	bl	8002938 <HAL_RCCEx_PeriphCLKConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000448:	f000 f992 	bl	8000770 <Error_Handler>
  }
}
 800044c:	bf00      	nop
 800044e:	3798      	adds	r7, #152	; 0x98
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <MX_I2C1_Init>:


static void MX_I2C1_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_I2C1_Init+0x74>)
 800045a:	4a1c      	ldr	r2, [pc, #112]	; (80004cc <MX_I2C1_Init+0x78>)
 800045c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_I2C1_Init+0x74>)
 8000460:	4a1b      	ldr	r2, [pc, #108]	; (80004d0 <MX_I2C1_Init+0x7c>)
 8000462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000464:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <MX_I2C1_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <MX_I2C1_Init+0x74>)
 800046c:	2201      	movs	r2, #1
 800046e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <MX_I2C1_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000476:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <MX_I2C1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <MX_I2C1_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_I2C1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_I2C1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800048e:	480e      	ldr	r0, [pc, #56]	; (80004c8 <MX_I2C1_Init+0x74>)
 8000490:	f000 fea1 	bl	80011d6 <HAL_I2C_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800049a:	f000 f969 	bl	8000770 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800049e:	2100      	movs	r1, #0
 80004a0:	4809      	ldr	r0, [pc, #36]	; (80004c8 <MX_I2C1_Init+0x74>)
 80004a2:	f000 ff27 	bl	80012f4 <HAL_I2CEx_ConfigAnalogFilter>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004ac:	f000 f960 	bl	8000770 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004b0:	2100      	movs	r1, #0
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_I2C1_Init+0x74>)
 80004b4:	f000 ff69 	bl	800138a <HAL_I2CEx_ConfigDigitalFilter>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004be:	f000 f957 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200000c4 	.word	0x200000c4
 80004cc:	40005400 	.word	0x40005400
 80004d0:	2000090e 	.word	0x2000090e

080004d4 <MX_USART2_UART_Init>:
  */



static void MX_USART2_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0


  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <MX_USART2_UART_Init+0x68>)
 80004da:	4a19      	ldr	r2, [pc, #100]	; (8000540 <MX_USART2_UART_Init+0x6c>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_USART2_UART_Init+0x68>)
 80004e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_USART2_UART_Init+0x68>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <MX_USART2_UART_Init+0x68>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <MX_USART2_UART_Init+0x68>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b10      	ldr	r3, [pc, #64]	; (800053c <MX_USART2_UART_Init+0x68>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_USART2_UART_Init+0x68>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <MX_USART2_UART_Init+0x68>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USART2_UART_Init+0x68>)
 800050c:	2200      	movs	r2, #0
 800050e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <MX_USART2_UART_Init+0x68>)
 8000512:	2200      	movs	r2, #0
 8000514:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000516:	4809      	ldr	r0, [pc, #36]	; (800053c <MX_USART2_UART_Init+0x68>)
 8000518:	f002 fc2c 	bl	8002d74 <HAL_UART_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000522:	f000 f925 	bl	8000770 <Error_Handler>
  }


  /* USART2 interrupt init */
     HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2102      	movs	r1, #2
 800052a:	2026      	movs	r0, #38	; 0x26
 800052c:	f000 fbc9 	bl	8000cc2 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000530:	2026      	movs	r0, #38	; 0x26
 8000532:	f000 fbe2 	bl	8000cfa <HAL_NVIC_EnableIRQ>

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000118 	.word	0x20000118
 8000540:	40004400 	.word	0x40004400

08000544 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	4b29      	ldr	r3, [pc, #164]	; (8000600 <MX_GPIO_Init+0xbc>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a28      	ldr	r2, [pc, #160]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b26      	ldr	r3, [pc, #152]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a22      	ldr	r2, [pc, #136]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <MX_GPIO_Init+0xbc>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_GPIO_Init+0xbc>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2120      	movs	r1, #32
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f000 fdd9 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	480f      	ldr	r0, [pc, #60]	; (8000604 <MX_GPIO_Init+0xc0>)
 80005c6:	f000 fc29 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005ca:	2320      	movs	r3, #32
 80005cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4619      	mov	r1, r3
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e4:	f000 fc1a 	bl	8000e1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	2028      	movs	r0, #40	; 0x28
 80005ee:	f000 fb68 	bl	8000cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005f2:	2028      	movs	r0, #40	; 0x28
 80005f4:	f000 fb81 	bl	8000cfa <HAL_NVIC_EnableIRQ>

}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	48000800 	.word	0x48000800

08000608 <process>:

void process(){
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0

	// Append received character to buffer
	        commandBuffer[bufferIndex++] = rxdata[0];
 800060e:	4b44      	ldr	r3, [pc, #272]	; (8000720 <process+0x118>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	4942      	ldr	r1, [pc, #264]	; (8000720 <process+0x118>)
 8000616:	600a      	str	r2, [r1, #0]
 8000618:	4a42      	ldr	r2, [pc, #264]	; (8000724 <process+0x11c>)
 800061a:	7811      	ldrb	r1, [r2, #0]
 800061c:	4a42      	ldr	r2, [pc, #264]	; (8000728 <process+0x120>)
 800061e:	54d1      	strb	r1, [r2, r3]

	        // Check for CRLF (command end)
	        if (bufferIndex >= 2 && commandBuffer[bufferIndex - 1] == '\n') {
 8000620:	4b3f      	ldr	r3, [pc, #252]	; (8000720 <process+0x118>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	dd76      	ble.n	8000716 <process+0x10e>
 8000628:	4b3d      	ldr	r3, [pc, #244]	; (8000720 <process+0x118>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	3b01      	subs	r3, #1
 800062e:	4a3e      	ldr	r2, [pc, #248]	; (8000728 <process+0x120>)
 8000630:	5cd3      	ldrb	r3, [r2, r3]
 8000632:	2b0a      	cmp	r3, #10
 8000634:	d16f      	bne.n	8000716 <process+0x10e>

	        	if (commandBuffer[bufferIndex - 2]=='\r') commandBuffer[bufferIndex - 2] = '\0';
 8000636:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <process+0x118>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3b02      	subs	r3, #2
 800063c:	4a3a      	ldr	r2, [pc, #232]	; (8000728 <process+0x120>)
 800063e:	5cd3      	ldrb	r3, [r2, r3]
 8000640:	2b0d      	cmp	r3, #13
 8000642:	d105      	bne.n	8000650 <process+0x48>
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <process+0x118>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3b02      	subs	r3, #2
 800064a:	4a37      	ldr	r2, [pc, #220]	; (8000728 <process+0x120>)
 800064c:	2100      	movs	r1, #0
 800064e:	54d1      	strb	r1, [r2, r3]

	        	if (strcmp(commandBuffer, "read_l") == 0) {
 8000650:	4936      	ldr	r1, [pc, #216]	; (800072c <process+0x124>)
 8000652:	4835      	ldr	r0, [pc, #212]	; (8000728 <process+0x120>)
 8000654:	f7ff fdc4 	bl	80001e0 <strcmp>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d123      	bne.n	80006a6 <process+0x9e>

	        		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) {
 800065e:	2120      	movs	r1, #32
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f000 fd64 	bl	8001130 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	2b01      	cmp	r3, #1
 800066c:	d10d      	bne.n	800068a <process+0x82>
	        		            const char* response = "l_on\n";
 800066e:	4b30      	ldr	r3, [pc, #192]	; (8000730 <process+0x128>)
 8000670:	623b      	str	r3, [r7, #32]
	        		            HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000672:	6a38      	ldr	r0, [r7, #32]
 8000674:	f7ff fdbe 	bl	80001f4 <strlen>
 8000678:	4603      	mov	r3, r0
 800067a:	b29a      	uxth	r2, r3
 800067c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000680:	6a39      	ldr	r1, [r7, #32]
 8000682:	482c      	ldr	r0, [pc, #176]	; (8000734 <process+0x12c>)
 8000684:	f002 fbc4 	bl	8002e10 <HAL_UART_Transmit>
 8000688:	e042      	b.n	8000710 <process+0x108>
	        		} else {
	        		            const char* response = "l_off\n";
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <process+0x130>)
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
	        		            HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 800068e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000690:	f7ff fdb0 	bl	80001f4 <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	b29a      	uxth	r2, r3
 8000698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800069e:	4825      	ldr	r0, [pc, #148]	; (8000734 <process+0x12c>)
 80006a0:	f002 fbb6 	bl	8002e10 <HAL_UART_Transmit>
 80006a4:	e034      	b.n	8000710 <process+0x108>
	        		        }

	        	} // end led status
	        	else if (strcmp(commandBuffer, "read_c") == 0) {
 80006a6:	4925      	ldr	r1, [pc, #148]	; (800073c <process+0x134>)
 80006a8:	481f      	ldr	r0, [pc, #124]	; (8000728 <process+0x120>)
 80006aa:	f7ff fd99 	bl	80001e0 <strcmp>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d114      	bne.n	80006de <process+0xd6>
	        	char buffer[32];
	            sprintf(buffer, "count=%lu\n", (uint32_t)Button_GetPressCount());
 80006b4:	f7ff fe18 	bl	80002e8 <Button_GetPressCount>
 80006b8:	4602      	mov	r2, r0
 80006ba:	463b      	mov	r3, r7
 80006bc:	4920      	ldr	r1, [pc, #128]	; (8000740 <process+0x138>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fe1c 	bl	80042fc <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006c4:	463b      	mov	r3, r7
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fd94 	bl	80001f4 <strlen>
 80006cc:	4603      	mov	r3, r0
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	4639      	mov	r1, r7
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <process+0x12c>)
 80006d8:	f002 fb9a 	bl	8002e10 <HAL_UART_Transmit>
 80006dc:	e018      	b.n	8000710 <process+0x108>
	        	}


	        	else {
	        		strcpy(commandBuffer,"command not supported\n");
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <process+0x120>)
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <process+0x13c>)
 80006e2:	4614      	mov	r4, r2
 80006e4:	461d      	mov	r5, r3
 80006e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006ee:	6020      	str	r0, [r4, #0]
 80006f0:	3404      	adds	r4, #4
 80006f2:	8021      	strh	r1, [r4, #0]
 80006f4:	3402      	adds	r4, #2
 80006f6:	0c0b      	lsrs	r3, r1, #16
 80006f8:	7023      	strb	r3, [r4, #0]
	        		HAL_UART_Transmit(&huart2, (uint8_t*)commandBuffer, strlen(commandBuffer), HAL_MAX_DELAY);
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <process+0x120>)
 80006fc:	f7ff fd7a 	bl	80001f4 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <process+0x120>)
 800070a:	480a      	ldr	r0, [pc, #40]	; (8000734 <process+0x12c>)
 800070c:	f002 fb80 	bl	8002e10 <HAL_UART_Transmit>
	        	}

	        	        bufferIndex = 0; // Reset buffer for next command
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <process+0x118>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]

	        	    }
}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bdb0      	pop	{r4, r5, r7, pc}
 800071e:	bf00      	nop
 8000720:	200000b4 	.word	0x200000b4
 8000724:	200000b8 	.word	0x200000b8
 8000728:	20000088 	.word	0x20000088
 800072c:	08004c5c 	.word	0x08004c5c
 8000730:	08004c64 	.word	0x08004c64
 8000734:	20000118 	.word	0x20000118
 8000738:	08004c6c 	.word	0x08004c6c
 800073c:	08004c74 	.word	0x08004c74
 8000740:	08004c7c 	.word	0x08004c7c
 8000744:	08004c88 	.word	0x08004c88

08000748 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	process();
 8000750:	f7ff ff5a 	bl	8000608 <process>

	HAL_UART_Receive_IT(&huart2,rxdata,1);
 8000754:	2201      	movs	r2, #1
 8000756:	4904      	ldr	r1, [pc, #16]	; (8000768 <HAL_UART_RxCpltCallback+0x20>)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <HAL_UART_RxCpltCallback+0x24>)
 800075a:	f002 fbe3 	bl	8002f24 <HAL_UART_Receive_IT>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000b8 	.word	0x200000b8
 800076c:	20000118 	.word	0x20000118

08000770 <Error_Handler>:


void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x44>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x44>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x44>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x44>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x44>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x44>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a17      	ldr	r2, [pc, #92]	; (8000840 <HAL_I2C_MspInit+0x7c>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d128      	bne.n	8000838 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <HAL_I2C_MspInit+0x80>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a16      	ldr	r2, [pc, #88]	; (8000844 <HAL_I2C_MspInit+0x80>)
 80007ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_I2C_MspInit+0x80>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000804:	2312      	movs	r3, #18
 8000806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000810:	2304      	movs	r3, #4
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	480b      	ldr	r0, [pc, #44]	; (8000848 <HAL_I2C_MspInit+0x84>)
 800081c:	f000 fafe 	bl	8000e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_I2C_MspInit+0x80>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_I2C_MspInit+0x80>)
 8000826:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082a:	61d3      	str	r3, [r2, #28]
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_I2C_MspInit+0x80>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40005400 	.word	0x40005400
 8000844:	40021000 	.word	0x40021000
 8000848:	48000400 	.word	0x48000400

0800084c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <HAL_UART_MspInit+0x8c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d130      	bne.n	80008d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086e:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <HAL_UART_MspInit+0x90>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a1a      	ldr	r2, [pc, #104]	; (80008dc <HAL_UART_MspInit+0x90>)
 8000874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <HAL_UART_MspInit+0x90>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_UART_MspInit+0x90>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a14      	ldr	r2, [pc, #80]	; (80008dc <HAL_UART_MspInit+0x90>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_UART_MspInit+0x90>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089e:	230c      	movs	r3, #12
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ae:	2307      	movs	r3, #7
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 faae 	bl	8000e1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2026      	movs	r0, #38	; 0x26
 80008c6:	f000 f9fc 	bl	8000cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ca:	2026      	movs	r0, #38	; 0x26
 80008cc:	f000 fa15 	bl	8000cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40021000 	.word	0x40021000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f8ce 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <USART2_IRQHandler+0x10>)
 800093a:	f002 fb37 	bl	8002fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000118 	.word	0x20000118

08000948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800094c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000950:	f000 fc1e 	bl	8001190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  Button_IRQHandler();
 8000954:	f7ff fcac 	bl	80002b0 <Button_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000964:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <_sbrk+0x5c>)
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <_sbrk+0x60>)
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <_sbrk+0x64>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <_sbrk+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <_sbrk+0x64>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	429a      	cmp	r2, r3
 800098a:	d207      	bcs.n	800099c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800098c:	f003 fcde 	bl	800434c <__errno>
 8000990:	4603      	mov	r3, r0
 8000992:	220c      	movs	r2, #12
 8000994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800099a:	e009      	b.n	80009b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <_sbrk+0x64>)
 80009ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ae:	68fb      	ldr	r3, [r7, #12]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20010000 	.word	0x20010000
 80009bc:	00000400 	.word	0x00000400
 80009c0:	200001a0 	.word	0x200001a0
 80009c4:	200002f0 	.word	0x200002f0

080009c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a24 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f0:	f7ff ffea 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f6:	490d      	ldr	r1, [pc, #52]	; (8000a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <LoopForever+0xe>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a0c:	4c0a      	ldr	r4, [pc, #40]	; (8000a38 <LoopForever+0x16>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f003 fc9d 	bl	8004358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1e:	f7ff fc83 	bl	8000328 <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000a30:	08004d14 	.word	0x08004d14
  ldr r2, =_sbss
 8000a34:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000a38:	200002f0 	.word	0x200002f0

08000a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_2_IRQHandler>
	...

08000a40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_Init+0x28>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_Init+0x28>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f92b 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	200f      	movs	r0, #15
 8000a58:	f000 f808 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff fe8e 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x54>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x58>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f943 	bl	8000d16 <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa8:	f000 f90b 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <HAL_InitTick+0x5c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000010 	.word	0x20000010
 8000ac8:	2000000c 	.word	0x2000000c

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x20>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x24>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_IncTick+0x24>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000010 	.word	0x20000010
 8000af0:	200001a4 	.word	0x200001a4

08000af4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200001a4 	.word	0x200001a4

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	; (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f7ff ff8e 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff29 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff3e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff8e 	bl	8000c00 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5d 	bl	8000bac <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff31 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffa2 	bl	8000c68 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d008      	beq.n	8000d52 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2204      	movs	r2, #4
 8000d44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e020      	b.n	8000d94 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 020e 	bic.w	r2, r2, #14
 8000d60:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0201 	bic.w	r2, r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d80:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2201      	movs	r2, #1
 8000d86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d005      	beq.n	8000dc2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2204      	movs	r2, #4
 8000dba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e027      	b.n	8000e12 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 020e 	bic.w	r2, r2, #14
 8000dd0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0201 	bic.w	r2, r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dea:	2101      	movs	r1, #1
 8000dec:	fa01 f202 	lsl.w	r2, r1, r2
 8000df0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2201      	movs	r2, #1
 8000df6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	4798      	blx	r3
    } 
  }
  return status;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e160      	b.n	80010ee <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8152 	beq.w	80010e8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d005      	beq.n	8000e5c <HAL_GPIO_Init+0x40>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d130      	bne.n	8000ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	f003 0201 	and.w	r2, r3, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d017      	beq.n	8000efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d123      	bne.n	8000f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	691a      	ldr	r2, [r3, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	6939      	ldr	r1, [r7, #16]
 8000f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0203 	and.w	r2, r3, #3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 80ac 	beq.w	80010e8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f90:	4b5e      	ldr	r3, [pc, #376]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a5d      	ldr	r2, [pc, #372]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b5b      	ldr	r3, [pc, #364]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa8:	4a59      	ldr	r2, [pc, #356]	; (8001110 <HAL_GPIO_Init+0x2f4>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd2:	d025      	beq.n	8001020 <HAL_GPIO_Init+0x204>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a4f      	ldr	r2, [pc, #316]	; (8001114 <HAL_GPIO_Init+0x2f8>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d01f      	beq.n	800101c <HAL_GPIO_Init+0x200>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4e      	ldr	r2, [pc, #312]	; (8001118 <HAL_GPIO_Init+0x2fc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d019      	beq.n	8001018 <HAL_GPIO_Init+0x1fc>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a4d      	ldr	r2, [pc, #308]	; (800111c <HAL_GPIO_Init+0x300>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1f8>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a4c      	ldr	r2, [pc, #304]	; (8001120 <HAL_GPIO_Init+0x304>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1f4>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a4b      	ldr	r2, [pc, #300]	; (8001124 <HAL_GPIO_Init+0x308>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1f0>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a4a      	ldr	r2, [pc, #296]	; (8001128 <HAL_GPIO_Init+0x30c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1ec>
 8001004:	2306      	movs	r3, #6
 8001006:	e00c      	b.n	8001022 <HAL_GPIO_Init+0x206>
 8001008:	2307      	movs	r3, #7
 800100a:	e00a      	b.n	8001022 <HAL_GPIO_Init+0x206>
 800100c:	2305      	movs	r3, #5
 800100e:	e008      	b.n	8001022 <HAL_GPIO_Init+0x206>
 8001010:	2304      	movs	r3, #4
 8001012:	e006      	b.n	8001022 <HAL_GPIO_Init+0x206>
 8001014:	2303      	movs	r3, #3
 8001016:	e004      	b.n	8001022 <HAL_GPIO_Init+0x206>
 8001018:	2302      	movs	r3, #2
 800101a:	e002      	b.n	8001022 <HAL_GPIO_Init+0x206>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <HAL_GPIO_Init+0x206>
 8001020:	2300      	movs	r3, #0
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	f002 0203 	and.w	r2, r2, #3
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	4093      	lsls	r3, r2
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001032:	4937      	ldr	r1, [pc, #220]	; (8001110 <HAL_GPIO_Init+0x2f4>)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001040:	4b3a      	ldr	r3, [pc, #232]	; (800112c <HAL_GPIO_Init+0x310>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001064:	4a31      	ldr	r2, [pc, #196]	; (800112c <HAL_GPIO_Init+0x310>)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800106a:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_GPIO_Init+0x310>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800108e:	4a27      	ldr	r2, [pc, #156]	; (800112c <HAL_GPIO_Init+0x310>)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <HAL_GPIO_Init+0x310>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_GPIO_Init+0x310>)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_GPIO_Init+0x310>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <HAL_GPIO_Init+0x310>)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	fa22 f303 	lsr.w	r3, r2, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f47f ae97 	bne.w	8000e2c <HAL_GPIO_Init+0x10>
  }
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40021000 	.word	0x40021000
 8001110:	40010000 	.word	0x40010000
 8001114:	48000400 	.word	0x48000400
 8001118:	48000800 	.word	0x48000800
 800111c:	48000c00 	.word	0x48000c00
 8001120:	48001000 	.word	0x48001000
 8001124:	48001400 	.word	0x48001400
 8001128:	48001800 	.word	0x48001800
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e001      	b.n	8001152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800117c:	e002      	b.n	8001184 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800119c:	695a      	ldr	r2, [r3, #20]
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f806 	bl	80011c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e081      	b.n	80012ec <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d106      	bne.n	8001202 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff fae1 	bl	80007c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2224      	movs	r2, #36	; 0x24
 8001206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001226:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001236:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d107      	bne.n	8001250 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	e006      	b.n	800125e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800125c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d104      	bne.n	8001270 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800126e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800127e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001282:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001292:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69d9      	ldr	r1, [r3, #28]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1a      	ldr	r2, [r3, #32]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0201 	orr.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2220      	movs	r2, #32
 80012d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b20      	cmp	r3, #32
 8001308:	d138      	bne.n	800137c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001314:	2302      	movs	r3, #2
 8001316:	e032      	b.n	800137e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2224      	movs	r2, #36	; 0x24
 8001324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0201 	bic.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001346:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6819      	ldr	r1, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2220      	movs	r2, #32
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	e000      	b.n	800137e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800137c:	2302      	movs	r3, #2
  }
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800138a:	b480      	push	{r7}
 800138c:	b085      	sub	sp, #20
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b20      	cmp	r3, #32
 800139e:	d139      	bne.n	8001414 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d101      	bne.n	80013ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e033      	b.n	8001416 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2224      	movs	r2, #36	; 0x24
 80013ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2220      	movs	r2, #32
 8001404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	e000      	b.n	8001416 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001414:	2302      	movs	r3, #2
  }
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800142a:	af00      	add	r7, sp, #0
 800142c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001430:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001434:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800143a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	f001 b83a 	b.w	80024be <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800144e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 816f 	beq.w	800173e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001460:	4bb5      	ldr	r3, [pc, #724]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b04      	cmp	r3, #4
 800146a:	d00c      	beq.n	8001486 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800146c:	4bb2      	ldr	r3, [pc, #712]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b08      	cmp	r3, #8
 8001476:	d15c      	bne.n	8001532 <HAL_RCC_OscConfig+0x10e>
 8001478:	4baf      	ldr	r3, [pc, #700]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001484:	d155      	bne.n	8001532 <HAL_RCC_OscConfig+0x10e>
 8001486:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800148a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800149a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	095b      	lsrs	r3, r3, #5
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d102      	bne.n	80014b8 <HAL_RCC_OscConfig+0x94>
 80014b2:	4ba1      	ldr	r3, [pc, #644]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	e015      	b.n	80014e4 <HAL_RCC_OscConfig+0xc0>
 80014b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80014c4:	fa93 f3a3 	rbit	r3, r3
 80014c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80014cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014d4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80014e0:	4b95      	ldr	r3, [pc, #596]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014e8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80014ec:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80014f0:	fa92 f2a2 	rbit	r2, r2
 80014f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80014f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80014fc:	fab2 f282 	clz	r2, r2
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	f042 0220 	orr.w	r2, r2, #32
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	f002 021f 	and.w	r2, r2, #31
 800150c:	2101      	movs	r1, #1
 800150e:	fa01 f202 	lsl.w	r2, r1, r2
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 8111 	beq.w	800173c <HAL_RCC_OscConfig+0x318>
 800151a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f040 8108 	bne.w	800173c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	f000 bfc6 	b.w	80024be <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001536:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x12e>
 8001544:	4b7c      	ldr	r3, [pc, #496]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a7b      	ldr	r2, [pc, #492]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 800154a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e036      	b.n	80015c0 <HAL_RCC_OscConfig+0x19c>
 8001552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001556:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0x158>
 8001562:	4b75      	ldr	r3, [pc, #468]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a74      	ldr	r2, [pc, #464]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 8001568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b72      	ldr	r3, [pc, #456]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a71      	ldr	r2, [pc, #452]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 8001574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e021      	b.n	80015c0 <HAL_RCC_OscConfig+0x19c>
 800157c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001580:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x184>
 800158e:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a69      	ldr	r2, [pc, #420]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 8001594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b67      	ldr	r3, [pc, #412]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a66      	ldr	r2, [pc, #408]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e00b      	b.n	80015c0 <HAL_RCC_OscConfig+0x19c>
 80015a8:	4b63      	ldr	r3, [pc, #396]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a62      	ldr	r2, [pc, #392]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 80015ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b60      	ldr	r3, [pc, #384]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a5f      	ldr	r2, [pc, #380]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d059      	beq.n	8001684 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fa90 	bl	8000af4 <HAL_GetTick>
 80015d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015da:	f7ff fa8b 	bl	8000af4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d902      	bls.n	80015f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	f000 bf67 	b.w	80024be <HAL_RCC_OscConfig+0x109a>
 80015f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80015fc:	fa93 f3a3 	rbit	r3, r3
 8001600:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001604:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001608:	fab3 f383 	clz	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d102      	bne.n	8001622 <HAL_RCC_OscConfig+0x1fe>
 800161c:	4b46      	ldr	r3, [pc, #280]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x22a>
 8001622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001626:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800163a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800163e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800164a:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001652:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001656:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800165a:	fa92 f2a2 	rbit	r2, r2
 800165e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001662:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001666:	fab2 f282 	clz	r2, r2
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	f042 0220 	orr.w	r2, r2, #32
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	f002 021f 	and.w	r2, r2, #31
 8001676:	2101      	movs	r1, #1
 8001678:	fa01 f202 	lsl.w	r2, r1, r2
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0ab      	beq.n	80015da <HAL_RCC_OscConfig+0x1b6>
 8001682:	e05c      	b.n	800173e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fa36 	bl	8000af4 <HAL_GetTick>
 8001688:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168e:	f7ff fa31 	bl	8000af4 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d902      	bls.n	80016a4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	f000 bf0d 	b.w	80024be <HAL_RCC_OscConfig+0x109a>
 80016a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80016b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d102      	bne.n	80016d6 <HAL_RCC_OscConfig+0x2b2>
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	e015      	b.n	8001702 <HAL_RCC_OscConfig+0x2de>
 80016d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80016ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80016f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016f6:	fa93 f3a3 	rbit	r3, r3
 80016fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_RCC_OscConfig+0x314>)
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001706:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800170a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800170e:	fa92 f2a2 	rbit	r2, r2
 8001712:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001716:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800171a:	fab2 f282 	clz	r2, r2
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	f042 0220 	orr.w	r2, r2, #32
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	f002 021f 	and.w	r2, r2, #31
 800172a:	2101      	movs	r1, #1
 800172c:	fa01 f202 	lsl.w	r2, r1, r2
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ab      	bne.n	800168e <HAL_RCC_OscConfig+0x26a>
 8001736:	e002      	b.n	800173e <HAL_RCC_OscConfig+0x31a>
 8001738:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001742:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 817f 	beq.w	8001a52 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001754:	4ba7      	ldr	r3, [pc, #668]	; (80019f4 <HAL_RCC_OscConfig+0x5d0>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00c      	beq.n	800177a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001760:	4ba4      	ldr	r3, [pc, #656]	; (80019f4 <HAL_RCC_OscConfig+0x5d0>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	d173      	bne.n	8001854 <HAL_RCC_OscConfig+0x430>
 800176c:	4ba1      	ldr	r3, [pc, #644]	; (80019f4 <HAL_RCC_OscConfig+0x5d0>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001778:	d16c      	bne.n	8001854 <HAL_RCC_OscConfig+0x430>
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800178c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d102      	bne.n	80017aa <HAL_RCC_OscConfig+0x386>
 80017a4:	4b93      	ldr	r3, [pc, #588]	; (80019f4 <HAL_RCC_OscConfig+0x5d0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	e013      	b.n	80017d2 <HAL_RCC_OscConfig+0x3ae>
 80017aa:	2302      	movs	r3, #2
 80017ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80017b4:	fa93 f3a3 	rbit	r3, r3
 80017b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80017bc:	2302      	movs	r3, #2
 80017be:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017ce:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <HAL_RCC_OscConfig+0x5d0>)
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	2202      	movs	r2, #2
 80017d4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80017d8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80017dc:	fa92 f2a2 	rbit	r2, r2
 80017e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80017e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	f042 0220 	orr.w	r2, r2, #32
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	f002 021f 	and.w	r2, r2, #31
 80017f8:	2101      	movs	r1, #1
 80017fa:	fa01 f202 	lsl.w	r2, r1, r2
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00a      	beq.n	800181a <HAL_RCC_OscConfig+0x3f6>
 8001804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001808:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d002      	beq.n	800181a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	f000 be52 	b.w	80024be <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181a:	4b76      	ldr	r3, [pc, #472]	; (80019f4 <HAL_RCC_OscConfig+0x5d0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001826:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	21f8      	movs	r1, #248	; 0xf8
 8001830:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001838:	fa91 f1a1 	rbit	r1, r1
 800183c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001840:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001844:	fab1 f181 	clz	r1, r1
 8001848:	b2c9      	uxtb	r1, r1
 800184a:	408b      	lsls	r3, r1
 800184c:	4969      	ldr	r1, [pc, #420]	; (80019f4 <HAL_RCC_OscConfig+0x5d0>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	e0fe      	b.n	8001a52 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001858:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8088 	beq.w	8001976 <HAL_RCC_OscConfig+0x552>
 8001866:	2301      	movs	r3, #1
 8001868:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001878:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001886:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	461a      	mov	r2, r3
 800188e:	2301      	movs	r3, #1
 8001890:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff f92f 	bl	8000af4 <HAL_GetTick>
 8001896:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff f92a 	bl	8000af4 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d902      	bls.n	80018b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	f000 be06 	b.w	80024be <HAL_RCC_OscConfig+0x109a>
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80018c4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d102      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4be>
 80018dc:	4b45      	ldr	r3, [pc, #276]	; (80019f4 <HAL_RCC_OscConfig+0x5d0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	e013      	b.n	800190a <HAL_RCC_OscConfig+0x4e6>
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80018fa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001906:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <HAL_RCC_OscConfig+0x5d0>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	2202      	movs	r2, #2
 800190c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001910:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001914:	fa92 f2a2 	rbit	r2, r2
 8001918:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800191c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001920:	fab2 f282 	clz	r2, r2
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f042 0220 	orr.w	r2, r2, #32
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	f002 021f 	and.w	r2, r2, #31
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f202 	lsl.w	r2, r1, r2
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0af      	beq.n	800189c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_RCC_OscConfig+0x5d0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001948:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	21f8      	movs	r1, #248	; 0xf8
 8001952:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800195a:	fa91 f1a1 	rbit	r1, r1
 800195e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001962:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001966:	fab1 f181 	clz	r1, r1
 800196a:	b2c9      	uxtb	r1, r1
 800196c:	408b      	lsls	r3, r1
 800196e:	4921      	ldr	r1, [pc, #132]	; (80019f4 <HAL_RCC_OscConfig+0x5d0>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e06d      	b.n	8001a52 <HAL_RCC_OscConfig+0x62e>
 8001976:	2301      	movs	r3, #1
 8001978:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001980:	fa93 f3a3 	rbit	r3, r3
 8001984:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001988:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198c:	fab3 f383 	clz	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001996:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	461a      	mov	r2, r3
 800199e:	2300      	movs	r3, #0
 80019a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff f8a7 	bl	8000af4 <HAL_GetTick>
 80019a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ac:	f7ff f8a2 	bl	8000af4 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d902      	bls.n	80019c2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	f000 bd7e 	b.w	80024be <HAL_RCC_OscConfig+0x109a>
 80019c2:	2302      	movs	r3, #2
 80019c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80019d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <HAL_RCC_OscConfig+0x5d4>
 80019ec:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <HAL_RCC_OscConfig+0x5d0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	e016      	b.n	8001a20 <HAL_RCC_OscConfig+0x5fc>
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	2302      	movs	r3, #2
 80019fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a02:	fa93 f3a3 	rbit	r3, r3
 8001a06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a1c:	4bbf      	ldr	r3, [pc, #764]	; (8001d1c <HAL_RCC_OscConfig+0x8f8>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	2202      	movs	r2, #2
 8001a22:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a26:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a2a:	fa92 f2a2 	rbit	r2, r2
 8001a2e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001a32:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a36:	fab2 f282 	clz	r2, r2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f042 0220 	orr.w	r2, r2, #32
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f002 021f 	and.w	r2, r2, #31
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ac      	bne.n	80019ac <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8113 	beq.w	8001c8e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d07c      	beq.n	8001b72 <HAL_RCC_OscConfig+0x74e>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001a8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	4ba2      	ldr	r3, [pc, #648]	; (8001d20 <HAL_RCC_OscConfig+0x8fc>)
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff f827 	bl	8000af4 <HAL_GetTick>
 8001aa6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff f822 	bl	8000af4 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d902      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	f000 bcfe 	b.w	80024be <HAL_RCC_OscConfig+0x109a>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001acc:	fa93 f2a3 	rbit	r2, r3
 8001ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f2a3 	rbit	r2, r3
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b06:	2202      	movs	r2, #2
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fa93 f2a3 	rbit	r2, r3
 8001b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	4b7e      	ldr	r3, [pc, #504]	; (8001d1c <HAL_RCC_OscConfig+0x8f8>)
 8001b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b2e:	2102      	movs	r1, #2
 8001b30:	6019      	str	r1, [r3, #0]
 8001b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f1a3 	rbit	r1, r3
 8001b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b48:	6019      	str	r1, [r3, #0]
  return result;
 8001b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d09d      	beq.n	8001aac <HAL_RCC_OscConfig+0x688>
 8001b70:	e08d      	b.n	8001c8e <HAL_RCC_OscConfig+0x86a>
 8001b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b90:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b94:	601a      	str	r2, [r3, #0]
  return result;
 8001b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b9e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b5d      	ldr	r3, [pc, #372]	; (8001d20 <HAL_RCC_OscConfig+0x8fc>)
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb4:	f7fe ff9e 	bl	8000af4 <HAL_GetTick>
 8001bb8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7fe ff99 	bl	8000af4 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d902      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	f000 bc75 	b.w	80024be <HAL_RCC_OscConfig+0x109a>
 8001bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bdc:	2202      	movs	r2, #2
 8001bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	fa93 f2a3 	rbit	r2, r3
 8001bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c00:	2202      	movs	r2, #2
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c24:	2202      	movs	r2, #2
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	fa93 f2a3 	rbit	r2, r3
 8001c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <HAL_RCC_OscConfig+0x8f8>)
 8001c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	6019      	str	r1, [r3, #0]
 8001c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	fa93 f1a3 	rbit	r1, r3
 8001c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c62:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c66:	6019      	str	r1, [r3, #0]
  return result;
 8001c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	2101      	movs	r1, #1
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d197      	bne.n	8001bbe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 81a5 	beq.w	8001fee <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001caa:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <HAL_RCC_OscConfig+0x8f8>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_RCC_OscConfig+0x8f8>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <HAL_RCC_OscConfig+0x8f8>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_RCC_OscConfig+0x8f8>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cdc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_RCC_OscConfig+0x900>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d121      	bne.n	8001d34 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_RCC_OscConfig+0x900>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_RCC_OscConfig+0x900>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfc:	f7fe fefa 	bl	8000af4 <HAL_GetTick>
 8001d00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	e010      	b.n	8001d28 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d06:	f7fe fef5 	bl	8000af4 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d908      	bls.n	8001d28 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e3d1      	b.n	80024be <HAL_RCC_OscConfig+0x109a>
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	10908120 	.word	0x10908120
 8001d24:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	4b8d      	ldr	r3, [pc, #564]	; (8001f60 <HAL_RCC_OscConfig+0xb3c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0e8      	beq.n	8001d06 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x92e>
 8001d44:	4b87      	ldr	r3, [pc, #540]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a86      	ldr	r2, [pc, #536]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6213      	str	r3, [r2, #32]
 8001d50:	e035      	b.n	8001dbe <HAL_RCC_OscConfig+0x99a>
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x958>
 8001d62:	4b80      	ldr	r3, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a7f      	ldr	r2, [pc, #508]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a7c      	ldr	r2, [pc, #496]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	e020      	b.n	8001dbe <HAL_RCC_OscConfig+0x99a>
 8001d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d10c      	bne.n	8001da6 <HAL_RCC_OscConfig+0x982>
 8001d8c:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a74      	ldr	r2, [pc, #464]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4a71      	ldr	r2, [pc, #452]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6213      	str	r3, [r2, #32]
 8001da4:	e00b      	b.n	8001dbe <HAL_RCC_OscConfig+0x99a>
 8001da6:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a6e      	ldr	r2, [pc, #440]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	6213      	str	r3, [r2, #32]
 8001db2:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a6b      	ldr	r2, [pc, #428]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8081 	beq.w	8001ed2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7fe fe90 	bl	8000af4 <HAL_GetTick>
 8001dd4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	e00b      	b.n	8001df2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7fe fe8b 	bl	8000af4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e365      	b.n	80024be <HAL_RCC_OscConfig+0x109a>
 8001df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e1e:	2202      	movs	r2, #2
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e26:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e38:	601a      	str	r2, [r3, #0]
  return result;
 8001e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e42:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_OscConfig+0xa3a>
 8001e58:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	e013      	b.n	8001e86 <HAL_RCC_OscConfig+0xa62>
 8001e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e62:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e66:	2202      	movs	r2, #2
 8001e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fa93 f2a3 	rbit	r2, r3
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e8a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e8e:	2102      	movs	r1, #2
 8001e90:	6011      	str	r1, [r2, #0]
 8001e92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e96:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	fa92 f1a2 	rbit	r1, r2
 8001ea0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ea4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001ea8:	6011      	str	r1, [r2, #0]
  return result;
 8001eaa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eae:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	fab2 f282 	clz	r2, r2
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	f002 021f 	and.w	r2, r2, #31
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d084      	beq.n	8001dda <HAL_RCC_OscConfig+0x9b6>
 8001ed0:	e083      	b.n	8001fda <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7fe fe0f 	bl	8000af4 <HAL_GetTick>
 8001ed6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001edc:	f7fe fe0a 	bl	8000af4 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e2e4      	b.n	80024be <HAL_RCC_OscConfig+0x109a>
 8001ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001efc:	2202      	movs	r2, #2
 8001efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f04:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	fa93 f2a3 	rbit	r2, r3
 8001f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f20:	2202      	movs	r2, #2
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	fa93 f2a3 	rbit	r2, r3
 8001f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f3a:	601a      	str	r2, [r3, #0]
  return result;
 8001f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f40:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f44:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	095b      	lsrs	r3, r3, #5
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d106      	bne.n	8001f68 <HAL_RCC_OscConfig+0xb44>
 8001f5a:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <HAL_RCC_OscConfig+0xb40>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	e017      	b.n	8001f90 <HAL_RCC_OscConfig+0xb6c>
 8001f60:	40007000 	.word	0x40007000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f70:	2202      	movs	r2, #2
 8001f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	fa93 f2a3 	rbit	r2, r3
 8001f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f86:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	4bb3      	ldr	r3, [pc, #716]	; (800225c <HAL_RCC_OscConfig+0xe38>)
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f98:	2102      	movs	r1, #2
 8001f9a:	6011      	str	r1, [r2, #0]
 8001f9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fa0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	fa92 f1a2 	rbit	r1, r2
 8001faa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fae:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001fb2:	6011      	str	r1, [r2, #0]
  return result;
 8001fb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fb8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	fab2 f282 	clz	r2, r2
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	f002 021f 	and.w	r2, r2, #31
 8001fce:	2101      	movs	r1, #1
 8001fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d180      	bne.n	8001edc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fda:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d105      	bne.n	8001fee <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe2:	4b9e      	ldr	r3, [pc, #632]	; (800225c <HAL_RCC_OscConfig+0xe38>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a9d      	ldr	r2, [pc, #628]	; (800225c <HAL_RCC_OscConfig+0xe38>)
 8001fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 825e 	beq.w	80024bc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002000:	4b96      	ldr	r3, [pc, #600]	; (800225c <HAL_RCC_OscConfig+0xe38>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	f000 821f 	beq.w	800244c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002012:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b02      	cmp	r3, #2
 800201c:	f040 8170 	bne.w	8002300 <HAL_RCC_OscConfig+0xedc>
 8002020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002024:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002028:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800202c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002032:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002040:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002044:	601a      	str	r2, [r3, #0]
  return result;
 8002046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800204e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800205a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	461a      	mov	r2, r3
 8002062:	2300      	movs	r3, #0
 8002064:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7fe fd45 	bl	8000af4 <HAL_GetTick>
 800206a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206e:	e009      	b.n	8002084 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002070:	f7fe fd40 	bl	8000af4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e21c      	b.n	80024be <HAL_RCC_OscConfig+0x109a>
 8002084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002088:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800208c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002096:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	fa93 f2a3 	rbit	r2, r3
 80020a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020a8:	601a      	str	r2, [r3, #0]
  return result;
 80020aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d102      	bne.n	80020ce <HAL_RCC_OscConfig+0xcaa>
 80020c8:	4b64      	ldr	r3, [pc, #400]	; (800225c <HAL_RCC_OscConfig+0xe38>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	e027      	b.n	800211e <HAL_RCC_OscConfig+0xcfa>
 80020ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80020d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	fa93 f2a3 	rbit	r2, r3
 80020ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80020fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002106:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	fa93 f2a3 	rbit	r2, r3
 8002110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002114:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_OscConfig+0xe38>)
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002122:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002126:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800212a:	6011      	str	r1, [r2, #0]
 800212c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002130:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	fa92 f1a2 	rbit	r1, r2
 800213a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800213e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002142:	6011      	str	r1, [r2, #0]
  return result;
 8002144:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002148:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	fab2 f282 	clz	r2, r2
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f042 0220 	orr.w	r2, r2, #32
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	f002 021f 	and.w	r2, r2, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f202 	lsl.w	r2, r1, r2
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d182      	bne.n	8002070 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800216a:	4b3c      	ldr	r3, [pc, #240]	; (800225c <HAL_RCC_OscConfig+0xe38>)
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	f023 020f 	bic.w	r2, r3, #15
 8002172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002176:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	4937      	ldr	r1, [pc, #220]	; (800225c <HAL_RCC_OscConfig+0xe38>)
 8002180:	4313      	orrs	r3, r2
 8002182:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002184:	4b35      	ldr	r3, [pc, #212]	; (800225c <HAL_RCC_OscConfig+0xe38>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800218c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002190:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a19      	ldr	r1, [r3, #32]
 8002198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	430b      	orrs	r3, r1
 80021a6:	492d      	ldr	r1, [pc, #180]	; (800225c <HAL_RCC_OscConfig+0xe38>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
 80021ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	fa93 f2a3 	rbit	r2, r3
 80021c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021d0:	601a      	str	r2, [r3, #0]
  return result;
 80021d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021da:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	461a      	mov	r2, r3
 80021ee:	2301      	movs	r3, #1
 80021f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe fc7f 	bl	8000af4 <HAL_GetTick>
 80021f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021fa:	e009      	b.n	8002210 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fc:	f7fe fc7a 	bl	8000af4 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e156      	b.n	80024be <HAL_RCC_OscConfig+0x109a>
 8002210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002214:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002218:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800221c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002222:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	fa93 f2a3 	rbit	r2, r3
 800222c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002230:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002234:	601a      	str	r2, [r3, #0]
  return result;
 8002236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800223e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d105      	bne.n	8002260 <HAL_RCC_OscConfig+0xe3c>
 8002254:	4b01      	ldr	r3, [pc, #4]	; (800225c <HAL_RCC_OscConfig+0xe38>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	e02a      	b.n	80022b0 <HAL_RCC_OscConfig+0xe8c>
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002264:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002272:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	fa93 f2a3 	rbit	r2, r3
 800227c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002280:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800228e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002298:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa93 f2a3 	rbit	r2, r3
 80022a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	4b86      	ldr	r3, [pc, #536]	; (80024c8 <HAL_RCC_OscConfig+0x10a4>)
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022bc:	6011      	str	r1, [r2, #0]
 80022be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	fa92 f1a2 	rbit	r1, r2
 80022cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022d0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80022d4:	6011      	str	r1, [r2, #0]
  return result;
 80022d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022da:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	fab2 f282 	clz	r2, r2
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f042 0220 	orr.w	r2, r2, #32
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	f002 021f 	and.w	r2, r2, #31
 80022f0:	2101      	movs	r1, #1
 80022f2:	fa01 f202 	lsl.w	r2, r1, r2
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f43f af7f 	beq.w	80021fc <HAL_RCC_OscConfig+0xdd8>
 80022fe:	e0dd      	b.n	80024bc <HAL_RCC_OscConfig+0x1098>
 8002300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002304:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800230c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002312:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	fa93 f2a3 	rbit	r2, r3
 800231c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002320:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002324:	601a      	str	r2, [r3, #0]
  return result;
 8002326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800232e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800233a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	461a      	mov	r2, r3
 8002342:	2300      	movs	r3, #0
 8002344:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7fe fbd5 	bl	8000af4 <HAL_GetTick>
 800234a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234e:	e009      	b.n	8002364 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe fbd0 	bl	8000af4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0ac      	b.n	80024be <HAL_RCC_OscConfig+0x109a>
 8002364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002368:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800236c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002376:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	fa93 f2a3 	rbit	r2, r3
 8002380:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002384:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002388:	601a      	str	r2, [r3, #0]
  return result;
 800238a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002392:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d102      	bne.n	80023ae <HAL_RCC_OscConfig+0xf8a>
 80023a8:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_OscConfig+0x10a4>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	e027      	b.n	80023fe <HAL_RCC_OscConfig+0xfda>
 80023ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	fa93 f2a3 	rbit	r2, r3
 80023ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80023dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	fa93 f2a3 	rbit	r2, r3
 80023f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	4b33      	ldr	r3, [pc, #204]	; (80024c8 <HAL_RCC_OscConfig+0x10a4>)
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002402:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002406:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800240a:	6011      	str	r1, [r2, #0]
 800240c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002410:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	fa92 f1a2 	rbit	r1, r2
 800241a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800241e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002422:	6011      	str	r1, [r2, #0]
  return result;
 8002424:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002428:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	fab2 f282 	clz	r2, r2
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	f042 0220 	orr.w	r2, r2, #32
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	f002 021f 	and.w	r2, r2, #31
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f202 	lsl.w	r2, r1, r2
 8002444:	4013      	ands	r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d182      	bne.n	8002350 <HAL_RCC_OscConfig+0xf2c>
 800244a:	e037      	b.n	80024bc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002450:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e02e      	b.n	80024be <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_OscConfig+0x10a4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <HAL_RCC_OscConfig+0x10a4>)
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002470:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002474:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	429a      	cmp	r2, r3
 8002486:	d117      	bne.n	80024b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002488:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800248c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002494:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800249c:	429a      	cmp	r2, r3
 800249e:	d10b      	bne.n	80024b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80024a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a4:	f003 020f 	and.w	r2, r3, #15
 80024a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000

080024cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b09e      	sub	sp, #120	; 0x78
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e162      	b.n	80027aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b90      	ldr	r3, [pc, #576]	; (8002728 <HAL_RCC_ClockConfig+0x25c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d910      	bls.n	8002514 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b8d      	ldr	r3, [pc, #564]	; (8002728 <HAL_RCC_ClockConfig+0x25c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 0207 	bic.w	r2, r3, #7
 80024fa:	498b      	ldr	r1, [pc, #556]	; (8002728 <HAL_RCC_ClockConfig+0x25c>)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b89      	ldr	r3, [pc, #548]	; (8002728 <HAL_RCC_ClockConfig+0x25c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e14a      	b.n	80027aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b82      	ldr	r3, [pc, #520]	; (800272c <HAL_RCC_ClockConfig+0x260>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	497f      	ldr	r1, [pc, #508]	; (800272c <HAL_RCC_ClockConfig+0x260>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80dc 	beq.w	80026f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d13c      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xf6>
 8002548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800254c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d102      	bne.n	8002572 <HAL_RCC_ClockConfig+0xa6>
 800256c:	4b6f      	ldr	r3, [pc, #444]	; (800272c <HAL_RCC_ClockConfig+0x260>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	e00f      	b.n	8002592 <HAL_RCC_ClockConfig+0xc6>
 8002572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002576:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	667b      	str	r3, [r7, #100]	; 0x64
 8002580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002584:	663b      	str	r3, [r7, #96]	; 0x60
 8002586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800258e:	4b67      	ldr	r3, [pc, #412]	; (800272c <HAL_RCC_ClockConfig+0x260>)
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002596:	65ba      	str	r2, [r7, #88]	; 0x58
 8002598:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800259a:	fa92 f2a2 	rbit	r2, r2
 800259e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025a2:	fab2 f282 	clz	r2, r2
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	f042 0220 	orr.w	r2, r2, #32
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f002 021f 	and.w	r2, r2, #31
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f202 	lsl.w	r2, r1, r2
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d17b      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0f3      	b.n	80027aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d13c      	bne.n	8002644 <HAL_RCC_ClockConfig+0x178>
 80025ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x128>
 80025ee:	4b4f      	ldr	r3, [pc, #316]	; (800272c <HAL_RCC_ClockConfig+0x260>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	e00f      	b.n	8002614 <HAL_RCC_ClockConfig+0x148>
 80025f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	647b      	str	r3, [r7, #68]	; 0x44
 8002602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002606:	643b      	str	r3, [r7, #64]	; 0x40
 8002608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002610:	4b46      	ldr	r3, [pc, #280]	; (800272c <HAL_RCC_ClockConfig+0x260>)
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002618:	63ba      	str	r2, [r7, #56]	; 0x38
 800261a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800261c:	fa92 f2a2 	rbit	r2, r2
 8002620:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002624:	fab2 f282 	clz	r2, r2
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f042 0220 	orr.w	r2, r2, #32
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f002 021f 	and.w	r2, r2, #31
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d13a      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0b2      	b.n	80027aa <HAL_RCC_ClockConfig+0x2de>
 8002644:	2302      	movs	r3, #2
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d102      	bne.n	800266c <HAL_RCC_ClockConfig+0x1a0>
 8002666:	4b31      	ldr	r3, [pc, #196]	; (800272c <HAL_RCC_ClockConfig+0x260>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	e00d      	b.n	8002688 <HAL_RCC_ClockConfig+0x1bc>
 800266c:	2302      	movs	r3, #2
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
 8002678:	2302      	movs	r3, #2
 800267a:	623b      	str	r3, [r7, #32]
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	4b29      	ldr	r3, [pc, #164]	; (800272c <HAL_RCC_ClockConfig+0x260>)
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	2202      	movs	r2, #2
 800268a:	61ba      	str	r2, [r7, #24]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	fa92 f2a2 	rbit	r2, r2
 8002692:	617a      	str	r2, [r7, #20]
  return result;
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	fab2 f282 	clz	r2, r2
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	f042 0220 	orr.w	r2, r2, #32
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	f002 021f 	and.w	r2, r2, #31
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f202 	lsl.w	r2, r1, r2
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e079      	b.n	80027aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_RCC_ClockConfig+0x260>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f023 0203 	bic.w	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	491a      	ldr	r1, [pc, #104]	; (800272c <HAL_RCC_ClockConfig+0x260>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c8:	f7fe fa14 	bl	8000af4 <HAL_GetTick>
 80026cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d0:	f7fe fa10 	bl	8000af4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	; 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e061      	b.n	80027aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_RCC_ClockConfig+0x260>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 020c 	and.w	r2, r3, #12
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d1eb      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_ClockConfig+0x25c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d214      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_RCC_ClockConfig+0x25c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 0207 	bic.w	r2, r3, #7
 800270e:	4906      	ldr	r1, [pc, #24]	; (8002728 <HAL_RCC_ClockConfig+0x25c>)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <HAL_RCC_ClockConfig+0x25c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e040      	b.n	80027aa <HAL_RCC_ClockConfig+0x2de>
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_RCC_ClockConfig+0x2e8>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	491a      	ldr	r1, [pc, #104]	; (80027b4 <HAL_RCC_ClockConfig+0x2e8>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <HAL_RCC_ClockConfig+0x2e8>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4912      	ldr	r1, [pc, #72]	; (80027b4 <HAL_RCC_ClockConfig+0x2e8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800276e:	f000 f829 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002772:	4601      	mov	r1, r0
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_RCC_ClockConfig+0x2e8>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800277c:	22f0      	movs	r2, #240	; 0xf0
 800277e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	fa92 f2a2 	rbit	r2, r2
 8002786:	60fa      	str	r2, [r7, #12]
  return result;
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	fab2 f282 	clz	r2, r2
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	40d3      	lsrs	r3, r2
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x2ec>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	fa21 f303 	lsr.w	r3, r1, r3
 800279a:	4a08      	ldr	r2, [pc, #32]	; (80027bc <HAL_RCC_ClockConfig+0x2f0>)
 800279c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HAL_RCC_ClockConfig+0x2f4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe f962 	bl	8000a6c <HAL_InitTick>
  
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3778      	adds	r7, #120	; 0x78
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08004ca0 	.word	0x08004ca0
 80027bc:	20000008 	.word	0x20000008
 80027c0:	2000000c 	.word	0x2000000c

080027c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b08b      	sub	sp, #44	; 0x2c
 80027c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027de:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d002      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x30>
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d003      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x36>
 80027f2:	e03f      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027f4:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_RCC_GetSysClockFreq+0xc8>)
 80027f6:	623b      	str	r3, [r7, #32]
      break;
 80027f8:	e03f      	b.n	800287a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002800:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002804:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	fa92 f2a2 	rbit	r2, r2
 800280c:	607a      	str	r2, [r7, #4]
  return result;
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	fab2 f282 	clz	r2, r2
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	40d3      	lsrs	r3, r2
 8002818:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <HAL_RCC_GetSysClockFreq+0xcc>)
 800281a:	5cd3      	ldrb	r3, [r2, r3]
 800281c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	220f      	movs	r2, #15
 8002828:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	fa92 f2a2 	rbit	r2, r2
 8002830:	60fa      	str	r2, [r7, #12]
  return result;
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	fab2 f282 	clz	r2, r2
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	40d3      	lsrs	r3, r2
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <HAL_RCC_GetSysClockFreq+0xd0>)
 800283e:	5cd3      	ldrb	r3, [r2, r3]
 8002840:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800284c:	4a0f      	ldr	r2, [pc, #60]	; (800288c <HAL_RCC_GetSysClockFreq+0xc8>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	fbb2 f2f3 	udiv	r2, r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
 800285c:	e007      	b.n	800286e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fbb2 f2f3 	udiv	r2, r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	fb02 f303 	mul.w	r3, r2, r3
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	623b      	str	r3, [r7, #32]
      break;
 8002872:	e002      	b.n	800287a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002876:	623b      	str	r3, [r7, #32]
      break;
 8002878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287a:	6a3b      	ldr	r3, [r7, #32]
}
 800287c:	4618      	mov	r0, r3
 800287e:	372c      	adds	r7, #44	; 0x2c
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40021000 	.word	0x40021000
 800288c:	007a1200 	.word	0x007a1200
 8002890:	08004cb8 	.word	0x08004cb8
 8002894:	08004cc8 	.word	0x08004cc8

08002898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_RCC_GetHCLKFreq+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000008 	.word	0x20000008

080028b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028b6:	f7ff ffef 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028ba:	4601      	mov	r1, r0
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	fa92 f2a2 	rbit	r2, r2
 80028d0:	603a      	str	r2, [r7, #0]
  return result;
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	fab2 f282 	clz	r2, r2
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	40d3      	lsrs	r3, r2
 80028dc:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000
 80028f0:	08004cb0 	.word	0x08004cb0

080028f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028fa:	f7ff ffcd 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028fe:	4601      	mov	r1, r0
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002908:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800290c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	fa92 f2a2 	rbit	r2, r2
 8002914:	603a      	str	r2, [r7, #0]
  return result;
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	fab2 f282 	clz	r2, r2
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	40d3      	lsrs	r3, r2
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	08004cb0 	.word	0x08004cb0

08002938 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b092      	sub	sp, #72	; 0x48
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80d4 	beq.w	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295c:	4b4e      	ldr	r3, [pc, #312]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10e      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002968:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	4a4a      	ldr	r2, [pc, #296]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002972:	61d3      	str	r3, [r2, #28]
 8002974:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002980:	2301      	movs	r3, #1
 8002982:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002986:	4b45      	ldr	r3, [pc, #276]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d118      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002992:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a41      	ldr	r2, [pc, #260]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299e:	f7fe f8a9 	bl	8000af4 <HAL_GetTick>
 80029a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	e008      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a6:	f7fe f8a5 	bl	8000af4 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b64      	cmp	r3, #100	; 0x64
 80029b2:	d901      	bls.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e1d6      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	4b38      	ldr	r3, [pc, #224]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029c4:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8084 	beq.w	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d07c      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e4:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2301      	movs	r3, #1
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	461a      	mov	r2, r3
 8002a32:	2300      	movs	r3, #0
 8002a34:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a36:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d04b      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a46:	f7fe f855 	bl	8000af4 <HAL_GetTick>
 8002a4a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe f851 	bl	8000af4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e180      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a64:	2302      	movs	r3, #2
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a70:	2302      	movs	r3, #2
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d108      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a92:	4b01      	ldr	r3, [pc, #4]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	e00d      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	10908100 	.word	0x10908100
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	4b9a      	ldr	r3, [pc, #616]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	613a      	str	r2, [r7, #16]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	fa92 f2a2 	rbit	r2, r2
 8002abe:	60fa      	str	r2, [r7, #12]
  return result;
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	fab2 f282 	clz	r2, r2
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f002 021f 	and.w	r2, r2, #31
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0b7      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ade:	4b8f      	ldr	r3, [pc, #572]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	498c      	ldr	r1, [pc, #560]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002af0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af8:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	4a87      	ldr	r2, [pc, #540]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b10:	4b82      	ldr	r3, [pc, #520]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	f023 0203 	bic.w	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	497f      	ldr	r1, [pc, #508]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b2e:	4b7b      	ldr	r3, [pc, #492]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4978      	ldr	r1, [pc, #480]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b4c:	4b73      	ldr	r3, [pc, #460]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	4970      	ldr	r1, [pc, #448]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b6a:	4b6c      	ldr	r3, [pc, #432]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f023 0210 	bic.w	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4969      	ldr	r1, [pc, #420]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b88:	4b64      	ldr	r3, [pc, #400]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	4961      	ldr	r1, [pc, #388]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ba6:	4b5d      	ldr	r3, [pc, #372]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f023 0220 	bic.w	r2, r3, #32
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	495a      	ldr	r1, [pc, #360]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bc4:	4b55      	ldr	r3, [pc, #340]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	4952      	ldr	r1, [pc, #328]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002be2:	4b4e      	ldr	r3, [pc, #312]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	494b      	ldr	r1, [pc, #300]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c00:	4b46      	ldr	r3, [pc, #280]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	4943      	ldr	r1, [pc, #268]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c1e:	4b3f      	ldr	r3, [pc, #252]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	493c      	ldr	r1, [pc, #240]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c3c:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	4934      	ldr	r1, [pc, #208]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c5a:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	492d      	ldr	r1, [pc, #180]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c78:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c84:	4925      	ldr	r1, [pc, #148]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	491e      	ldr	r1, [pc, #120]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	4916      	ldr	r1, [pc, #88]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cde:	490f      	ldr	r1, [pc, #60]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	4907      	ldr	r1, [pc, #28]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d0e:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	e002      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d22:	4913      	ldr	r1, [pc, #76]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d40:	490b      	ldr	r1, [pc, #44]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5e:	4904      	ldr	r1, [pc, #16]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3748      	adds	r7, #72	; 0x48
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000

08002d74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e040      	b.n	8002e08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fd fd58 	bl	800084c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2224      	movs	r2, #36	; 0x24
 8002da0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fc00 	bl	80035b8 <UART_SetConfig>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e022      	b.n	8002e08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fdc8 	bl	8003960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fe4f 	bl	8003aa4 <UART_CheckIdleState>
 8002e06:	4603      	mov	r3, r0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08a      	sub	sp, #40	; 0x28
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d178      	bne.n	8002f1a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_UART_Transmit+0x24>
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e071      	b.n	8002f1c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2221      	movs	r2, #33	; 0x21
 8002e44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e46:	f7fd fe55 	bl	8000af4 <HAL_GetTick>
 8002e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	88fa      	ldrh	r2, [r7, #6]
 8002e50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	88fa      	ldrh	r2, [r7, #6]
 8002e58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e64:	d108      	bne.n	8002e78 <HAL_UART_Transmit+0x68>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d104      	bne.n	8002e78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	e003      	b.n	8002e80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e80:	e030      	b.n	8002ee4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 feb1 	bl	8003bf4 <UART_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e03c      	b.n	8002f1c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10b      	bne.n	8002ec0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	881a      	ldrh	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eb4:	b292      	uxth	r2, r2
 8002eb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	3302      	adds	r3, #2
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	e008      	b.n	8002ed2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	b292      	uxth	r2, r2
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1c8      	bne.n	8002e82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2140      	movs	r1, #64	; 0x40
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fe7a 	bl	8003bf4 <UART_WaitOnFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d004      	beq.n	8002f10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e005      	b.n	8002f1c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d132      	bne.n	8002fa2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_UART_Receive_IT+0x24>
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e02b      	b.n	8002fa4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d018      	beq.n	8002f92 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	69f9      	ldr	r1, [r7, #28]
 8002f84:	6a3a      	ldr	r2, [r7, #32]
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e6      	bne.n	8002f60 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	461a      	mov	r2, r3
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fe93 	bl	8003cc4 <UART_Start_Receive_IT>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	e000      	b.n	8002fa4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
  }
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3728      	adds	r7, #40	; 0x28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b0ba      	sub	sp, #232	; 0xe8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002fd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002fda:	4013      	ands	r3, r2
 8002fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d115      	bne.n	8003014 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00f      	beq.n	8003014 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 82ab 	beq.w	8003560 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
      }
      return;
 8003012:	e2a5      	b.n	8003560 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8117 	beq.w	800324c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800301e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800302a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800302e:	4b85      	ldr	r3, [pc, #532]	; (8003244 <HAL_UART_IRQHandler+0x298>)
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 810a 	beq.w	800324c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d011      	beq.n	8003068 <HAL_UART_IRQHandler+0xbc>
 8003044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2201      	movs	r2, #1
 8003056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d011      	beq.n	8003098 <HAL_UART_IRQHandler+0xec>
 8003074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00b      	beq.n	8003098 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2202      	movs	r2, #2
 8003086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308e:	f043 0204 	orr.w	r2, r3, #4
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d011      	beq.n	80030c8 <HAL_UART_IRQHandler+0x11c>
 80030a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00b      	beq.n	80030c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2204      	movs	r2, #4
 80030b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030be:	f043 0202 	orr.w	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d017      	beq.n	8003104 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2208      	movs	r2, #8
 80030f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fa:	f043 0208 	orr.w	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310c:	2b00      	cmp	r3, #0
 800310e:	d012      	beq.n	8003136 <HAL_UART_IRQHandler+0x18a>
 8003110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00c      	beq.n	8003136 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8211 	beq.w	8003564 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800314e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003170:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b40      	cmp	r3, #64	; 0x40
 8003180:	d005      	beq.n	800318e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003186:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800318a:	2b00      	cmp	r3, #0
 800318c:	d04f      	beq.n	800322e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fe5e 	bl	8003e50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d141      	bne.n	8003226 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3308      	adds	r3, #8
 80031a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3308      	adds	r3, #8
 80031ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031de:	e841 2300 	strex	r3, r2, [r1]
 80031e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1d9      	bne.n	80031a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d013      	beq.n	800321e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fa:	4a13      	ldr	r2, [pc, #76]	; (8003248 <HAL_UART_IRQHandler+0x29c>)
 80031fc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd fdcc 	bl	8000da0 <HAL_DMA_Abort_IT>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d017      	beq.n	800323e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003218:	4610      	mov	r0, r2
 800321a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	e00f      	b.n	800323e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f9b4 	bl	800358c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e00b      	b.n	800323e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f9b0 	bl	800358c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e007      	b.n	800323e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f9ac 	bl	800358c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800323c:	e192      	b.n	8003564 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323e:	bf00      	nop
    return;
 8003240:	e190      	b.n	8003564 <HAL_UART_IRQHandler+0x5b8>
 8003242:	bf00      	nop
 8003244:	04000120 	.word	0x04000120
 8003248:	08003f19 	.word	0x08003f19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003250:	2b01      	cmp	r3, #1
 8003252:	f040 814b 	bne.w	80034ec <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8144 	beq.w	80034ec <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 813d 	beq.w	80034ec <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2210      	movs	r2, #16
 8003278:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	f040 80b5 	bne.w	80033f4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003296:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8164 	beq.w	8003568 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032aa:	429a      	cmp	r2, r3
 80032ac:	f080 815c 	bcs.w	8003568 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	f000 8086 	beq.w	80033d2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032d2:	e853 3f00 	ldrex	r3, [r3]
 80032d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032f4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003300:	e841 2300 	strex	r3, r2, [r1]
 8003304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1da      	bne.n	80032c6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3308      	adds	r3, #8
 8003316:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800331a:	e853 3f00 	ldrex	r3, [r3]
 800331e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3308      	adds	r3, #8
 8003330:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003334:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003338:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800333c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003340:	e841 2300 	strex	r3, r2, [r1]
 8003344:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1e1      	bne.n	8003310 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3308      	adds	r3, #8
 8003352:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003356:	e853 3f00 	ldrex	r3, [r3]
 800335a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800335c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800335e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3308      	adds	r3, #8
 800336c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003370:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003372:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003376:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800337e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e3      	bne.n	800334c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a2:	f023 0310 	bic.w	r3, r3, #16
 80033a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80033b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e4      	bne.n	8003392 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fcae 	bl	8000d2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	4619      	mov	r1, r3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8d7 	bl	80035a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033f2:	e0b9      	b.n	8003568 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003400:	b29b      	uxth	r3, r3
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80ab 	beq.w	800356c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003416:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80a6 	beq.w	800356c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800342e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003434:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003442:	647b      	str	r3, [r7, #68]	; 0x44
 8003444:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e4      	bne.n	8003420 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3308      	adds	r3, #8
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	623b      	str	r3, [r7, #32]
   return(result);
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3308      	adds	r3, #8
 8003476:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800347a:	633a      	str	r2, [r7, #48]	; 0x30
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e3      	bne.n	8003456 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0310 	bic.w	r3, r3, #16
 80034b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	69b9      	ldr	r1, [r7, #24]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	617b      	str	r3, [r7, #20]
   return(result);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e4      	bne.n	80034a2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034e2:	4619      	mov	r1, r3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f85b 	bl	80035a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034ea:	e03f      	b.n	800356c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <HAL_UART_IRQHandler+0x56a>
 80034f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800350c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 feea 	bl	80042e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003514:	e02d      	b.n	8003572 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00e      	beq.n	8003540 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01c      	beq.n	8003570 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
    }
    return;
 800353e:	e017      	b.n	8003570 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d012      	beq.n	8003572 <HAL_UART_IRQHandler+0x5c6>
 800354c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00c      	beq.n	8003572 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fcf3 	bl	8003f44 <UART_EndTransmit_IT>
    return;
 800355e:	e008      	b.n	8003572 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003560:	bf00      	nop
 8003562:	e006      	b.n	8003572 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003564:	bf00      	nop
 8003566:	e004      	b.n	8003572 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003568:	bf00      	nop
 800356a:	e002      	b.n	8003572 <HAL_UART_IRQHandler+0x5c6>
      return;
 800356c:	bf00      	nop
 800356e:	e000      	b.n	8003572 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003570:	bf00      	nop
  }

}
 8003572:	37e8      	adds	r7, #232	; 0xe8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4b92      	ldr	r3, [pc, #584]	; (800382c <UART_SetConfig+0x274>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	6979      	ldr	r1, [r7, #20]
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	430a      	orrs	r2, r1
 8003628:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a80      	ldr	r2, [pc, #512]	; (8003830 <UART_SetConfig+0x278>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d120      	bne.n	8003676 <UART_SetConfig+0xbe>
 8003634:	4b7f      	ldr	r3, [pc, #508]	; (8003834 <UART_SetConfig+0x27c>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	2b03      	cmp	r3, #3
 800363e:	d817      	bhi.n	8003670 <UART_SetConfig+0xb8>
 8003640:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <UART_SetConfig+0x90>)
 8003642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003646:	bf00      	nop
 8003648:	08003659 	.word	0x08003659
 800364c:	08003665 	.word	0x08003665
 8003650:	0800366b 	.word	0x0800366b
 8003654:	0800365f 	.word	0x0800365f
 8003658:	2301      	movs	r3, #1
 800365a:	77fb      	strb	r3, [r7, #31]
 800365c:	e0b5      	b.n	80037ca <UART_SetConfig+0x212>
 800365e:	2302      	movs	r3, #2
 8003660:	77fb      	strb	r3, [r7, #31]
 8003662:	e0b2      	b.n	80037ca <UART_SetConfig+0x212>
 8003664:	2304      	movs	r3, #4
 8003666:	77fb      	strb	r3, [r7, #31]
 8003668:	e0af      	b.n	80037ca <UART_SetConfig+0x212>
 800366a:	2308      	movs	r3, #8
 800366c:	77fb      	strb	r3, [r7, #31]
 800366e:	e0ac      	b.n	80037ca <UART_SetConfig+0x212>
 8003670:	2310      	movs	r3, #16
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e0a9      	b.n	80037ca <UART_SetConfig+0x212>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6f      	ldr	r2, [pc, #444]	; (8003838 <UART_SetConfig+0x280>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d124      	bne.n	80036ca <UART_SetConfig+0x112>
 8003680:	4b6c      	ldr	r3, [pc, #432]	; (8003834 <UART_SetConfig+0x27c>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003688:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800368c:	d011      	beq.n	80036b2 <UART_SetConfig+0xfa>
 800368e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003692:	d817      	bhi.n	80036c4 <UART_SetConfig+0x10c>
 8003694:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003698:	d011      	beq.n	80036be <UART_SetConfig+0x106>
 800369a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800369e:	d811      	bhi.n	80036c4 <UART_SetConfig+0x10c>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <UART_SetConfig+0xf4>
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a8:	d006      	beq.n	80036b8 <UART_SetConfig+0x100>
 80036aa:	e00b      	b.n	80036c4 <UART_SetConfig+0x10c>
 80036ac:	2300      	movs	r3, #0
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e08b      	b.n	80037ca <UART_SetConfig+0x212>
 80036b2:	2302      	movs	r3, #2
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e088      	b.n	80037ca <UART_SetConfig+0x212>
 80036b8:	2304      	movs	r3, #4
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e085      	b.n	80037ca <UART_SetConfig+0x212>
 80036be:	2308      	movs	r3, #8
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e082      	b.n	80037ca <UART_SetConfig+0x212>
 80036c4:	2310      	movs	r3, #16
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e07f      	b.n	80037ca <UART_SetConfig+0x212>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5b      	ldr	r2, [pc, #364]	; (800383c <UART_SetConfig+0x284>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d124      	bne.n	800371e <UART_SetConfig+0x166>
 80036d4:	4b57      	ldr	r3, [pc, #348]	; (8003834 <UART_SetConfig+0x27c>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80036dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036e0:	d011      	beq.n	8003706 <UART_SetConfig+0x14e>
 80036e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036e6:	d817      	bhi.n	8003718 <UART_SetConfig+0x160>
 80036e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036ec:	d011      	beq.n	8003712 <UART_SetConfig+0x15a>
 80036ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036f2:	d811      	bhi.n	8003718 <UART_SetConfig+0x160>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <UART_SetConfig+0x148>
 80036f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036fc:	d006      	beq.n	800370c <UART_SetConfig+0x154>
 80036fe:	e00b      	b.n	8003718 <UART_SetConfig+0x160>
 8003700:	2300      	movs	r3, #0
 8003702:	77fb      	strb	r3, [r7, #31]
 8003704:	e061      	b.n	80037ca <UART_SetConfig+0x212>
 8003706:	2302      	movs	r3, #2
 8003708:	77fb      	strb	r3, [r7, #31]
 800370a:	e05e      	b.n	80037ca <UART_SetConfig+0x212>
 800370c:	2304      	movs	r3, #4
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e05b      	b.n	80037ca <UART_SetConfig+0x212>
 8003712:	2308      	movs	r3, #8
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e058      	b.n	80037ca <UART_SetConfig+0x212>
 8003718:	2310      	movs	r3, #16
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e055      	b.n	80037ca <UART_SetConfig+0x212>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a47      	ldr	r2, [pc, #284]	; (8003840 <UART_SetConfig+0x288>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d124      	bne.n	8003772 <UART_SetConfig+0x1ba>
 8003728:	4b42      	ldr	r3, [pc, #264]	; (8003834 <UART_SetConfig+0x27c>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003730:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003734:	d011      	beq.n	800375a <UART_SetConfig+0x1a2>
 8003736:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800373a:	d817      	bhi.n	800376c <UART_SetConfig+0x1b4>
 800373c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003740:	d011      	beq.n	8003766 <UART_SetConfig+0x1ae>
 8003742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003746:	d811      	bhi.n	800376c <UART_SetConfig+0x1b4>
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <UART_SetConfig+0x19c>
 800374c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003750:	d006      	beq.n	8003760 <UART_SetConfig+0x1a8>
 8003752:	e00b      	b.n	800376c <UART_SetConfig+0x1b4>
 8003754:	2300      	movs	r3, #0
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e037      	b.n	80037ca <UART_SetConfig+0x212>
 800375a:	2302      	movs	r3, #2
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e034      	b.n	80037ca <UART_SetConfig+0x212>
 8003760:	2304      	movs	r3, #4
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e031      	b.n	80037ca <UART_SetConfig+0x212>
 8003766:	2308      	movs	r3, #8
 8003768:	77fb      	strb	r3, [r7, #31]
 800376a:	e02e      	b.n	80037ca <UART_SetConfig+0x212>
 800376c:	2310      	movs	r3, #16
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e02b      	b.n	80037ca <UART_SetConfig+0x212>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a33      	ldr	r2, [pc, #204]	; (8003844 <UART_SetConfig+0x28c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d124      	bne.n	80037c6 <UART_SetConfig+0x20e>
 800377c:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <UART_SetConfig+0x27c>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003784:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003788:	d011      	beq.n	80037ae <UART_SetConfig+0x1f6>
 800378a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800378e:	d817      	bhi.n	80037c0 <UART_SetConfig+0x208>
 8003790:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003794:	d011      	beq.n	80037ba <UART_SetConfig+0x202>
 8003796:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800379a:	d811      	bhi.n	80037c0 <UART_SetConfig+0x208>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <UART_SetConfig+0x1f0>
 80037a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a4:	d006      	beq.n	80037b4 <UART_SetConfig+0x1fc>
 80037a6:	e00b      	b.n	80037c0 <UART_SetConfig+0x208>
 80037a8:	2300      	movs	r3, #0
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e00d      	b.n	80037ca <UART_SetConfig+0x212>
 80037ae:	2302      	movs	r3, #2
 80037b0:	77fb      	strb	r3, [r7, #31]
 80037b2:	e00a      	b.n	80037ca <UART_SetConfig+0x212>
 80037b4:	2304      	movs	r3, #4
 80037b6:	77fb      	strb	r3, [r7, #31]
 80037b8:	e007      	b.n	80037ca <UART_SetConfig+0x212>
 80037ba:	2308      	movs	r3, #8
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e004      	b.n	80037ca <UART_SetConfig+0x212>
 80037c0:	2310      	movs	r3, #16
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e001      	b.n	80037ca <UART_SetConfig+0x212>
 80037c6:	2310      	movs	r3, #16
 80037c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d2:	d16b      	bne.n	80038ac <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80037d4:	7ffb      	ldrb	r3, [r7, #31]
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d838      	bhi.n	800384c <UART_SetConfig+0x294>
 80037da:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <UART_SetConfig+0x228>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	08003805 	.word	0x08003805
 80037e4:	0800380d 	.word	0x0800380d
 80037e8:	08003815 	.word	0x08003815
 80037ec:	0800384d 	.word	0x0800384d
 80037f0:	0800381b 	.word	0x0800381b
 80037f4:	0800384d 	.word	0x0800384d
 80037f8:	0800384d 	.word	0x0800384d
 80037fc:	0800384d 	.word	0x0800384d
 8003800:	08003823 	.word	0x08003823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003804:	f7ff f854 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 8003808:	61b8      	str	r0, [r7, #24]
        break;
 800380a:	e024      	b.n	8003856 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800380c:	f7ff f872 	bl	80028f4 <HAL_RCC_GetPCLK2Freq>
 8003810:	61b8      	str	r0, [r7, #24]
        break;
 8003812:	e020      	b.n	8003856 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <UART_SetConfig+0x290>)
 8003816:	61bb      	str	r3, [r7, #24]
        break;
 8003818:	e01d      	b.n	8003856 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381a:	f7fe ffd3 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 800381e:	61b8      	str	r0, [r7, #24]
        break;
 8003820:	e019      	b.n	8003856 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003826:	61bb      	str	r3, [r7, #24]
        break;
 8003828:	e015      	b.n	8003856 <UART_SetConfig+0x29e>
 800382a:	bf00      	nop
 800382c:	efff69f3 	.word	0xefff69f3
 8003830:	40013800 	.word	0x40013800
 8003834:	40021000 	.word	0x40021000
 8003838:	40004400 	.word	0x40004400
 800383c:	40004800 	.word	0x40004800
 8003840:	40004c00 	.word	0x40004c00
 8003844:	40005000 	.word	0x40005000
 8003848:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	77bb      	strb	r3, [r7, #30]
        break;
 8003854:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d073      	beq.n	8003944 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	005a      	lsls	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	441a      	add	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b0f      	cmp	r3, #15
 8003876:	d916      	bls.n	80038a6 <UART_SetConfig+0x2ee>
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387e:	d212      	bcs.n	80038a6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	b29b      	uxth	r3, r3
 8003884:	f023 030f 	bic.w	r3, r3, #15
 8003888:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	b29b      	uxth	r3, r3
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	b29a      	uxth	r2, r3
 8003896:	89fb      	ldrh	r3, [r7, #14]
 8003898:	4313      	orrs	r3, r2
 800389a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	89fa      	ldrh	r2, [r7, #14]
 80038a2:	60da      	str	r2, [r3, #12]
 80038a4:	e04e      	b.n	8003944 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	77bb      	strb	r3, [r7, #30]
 80038aa:	e04b      	b.n	8003944 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038ac:	7ffb      	ldrb	r3, [r7, #31]
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d827      	bhi.n	8003902 <UART_SetConfig+0x34a>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <UART_SetConfig+0x300>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038dd 	.word	0x080038dd
 80038bc:	080038e5 	.word	0x080038e5
 80038c0:	080038ed 	.word	0x080038ed
 80038c4:	08003903 	.word	0x08003903
 80038c8:	080038f3 	.word	0x080038f3
 80038cc:	08003903 	.word	0x08003903
 80038d0:	08003903 	.word	0x08003903
 80038d4:	08003903 	.word	0x08003903
 80038d8:	080038fb 	.word	0x080038fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038dc:	f7fe ffe8 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 80038e0:	61b8      	str	r0, [r7, #24]
        break;
 80038e2:	e013      	b.n	800390c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038e4:	f7ff f806 	bl	80028f4 <HAL_RCC_GetPCLK2Freq>
 80038e8:	61b8      	str	r0, [r7, #24]
        break;
 80038ea:	e00f      	b.n	800390c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ec:	4b1b      	ldr	r3, [pc, #108]	; (800395c <UART_SetConfig+0x3a4>)
 80038ee:	61bb      	str	r3, [r7, #24]
        break;
 80038f0:	e00c      	b.n	800390c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f2:	f7fe ff67 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 80038f6:	61b8      	str	r0, [r7, #24]
        break;
 80038f8:	e008      	b.n	800390c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fe:	61bb      	str	r3, [r7, #24]
        break;
 8003900:	e004      	b.n	800390c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	77bb      	strb	r3, [r7, #30]
        break;
 800390a:	bf00      	nop
    }

    if (pclk != 0U)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d018      	beq.n	8003944 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	085a      	lsrs	r2, r3, #1
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	441a      	add	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b0f      	cmp	r3, #15
 800392a:	d909      	bls.n	8003940 <UART_SetConfig+0x388>
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003932:	d205      	bcs.n	8003940 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	e001      	b.n	8003944 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003950:	7fbb      	ldrb	r3, [r7, #30]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	007a1200 	.word	0x007a1200

08003960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01a      	beq.n	8003a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5e:	d10a      	bne.n	8003a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]
  }
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b098      	sub	sp, #96	; 0x60
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ab4:	f7fd f81e 	bl	8000af4 <HAL_GetTick>
 8003ab8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d12e      	bne.n	8003b26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f88c 	bl	8003bf4 <UART_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d021      	beq.n	8003b26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af6:	653b      	str	r3, [r7, #80]	; 0x50
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b00:	647b      	str	r3, [r7, #68]	; 0x44
 8003b02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e6      	bne.n	8003ae2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e062      	b.n	8003bec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d149      	bne.n	8003bc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f856 	bl	8003bf4 <UART_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d03c      	beq.n	8003bc8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	623b      	str	r3, [r7, #32]
   return(result);
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e6      	bne.n	8003b4e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3308      	adds	r3, #8
 8003b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ba0:	61fa      	str	r2, [r7, #28]
 8003ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	69b9      	ldr	r1, [r7, #24]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	617b      	str	r3, [r7, #20]
   return(result);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e5      	bne.n	8003b80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e011      	b.n	8003bec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3758      	adds	r7, #88	; 0x58
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c04:	e049      	b.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c0c:	d045      	beq.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0e:	f7fc ff71 	bl	8000af4 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d302      	bcc.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e048      	b.n	8003cba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d031      	beq.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d110      	bne.n	8003c66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f8ff 	bl	8003e50 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2208      	movs	r2, #8
 8003c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e029      	b.n	8003cba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c74:	d111      	bne.n	8003c9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f8e5 	bl	8003e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e00f      	b.n	8003cba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	bf0c      	ite	eq
 8003caa:	2301      	moveq	r3, #1
 8003cac:	2300      	movne	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d0a6      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b097      	sub	sp, #92	; 0x5c
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	88fa      	ldrh	r2, [r7, #6]
 8003ce4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf6:	d10e      	bne.n	8003d16 <UART_Start_Receive_IT+0x52>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <UART_Start_Receive_IT+0x48>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d0a:	e02d      	b.n	8003d68 <UART_Start_Receive_IT+0xa4>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	22ff      	movs	r2, #255	; 0xff
 8003d10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d14:	e028      	b.n	8003d68 <UART_Start_Receive_IT+0xa4>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10d      	bne.n	8003d3a <UART_Start_Receive_IT+0x76>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <UART_Start_Receive_IT+0x6c>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	22ff      	movs	r2, #255	; 0xff
 8003d2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d2e:	e01b      	b.n	8003d68 <UART_Start_Receive_IT+0xa4>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	227f      	movs	r2, #127	; 0x7f
 8003d34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d38:	e016      	b.n	8003d68 <UART_Start_Receive_IT+0xa4>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d42:	d10d      	bne.n	8003d60 <UART_Start_Receive_IT+0x9c>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d104      	bne.n	8003d56 <UART_Start_Receive_IT+0x92>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	227f      	movs	r2, #127	; 0x7f
 8003d50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d54:	e008      	b.n	8003d68 <UART_Start_Receive_IT+0xa4>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	223f      	movs	r2, #63	; 0x3f
 8003d5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d5e:	e003      	b.n	8003d68 <UART_Start_Receive_IT+0xa4>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2222      	movs	r2, #34	; 0x22
 8003d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3308      	adds	r3, #8
 8003d96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d98:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e5      	bne.n	8003d78 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db4:	d107      	bne.n	8003dc6 <UART_Start_Receive_IT+0x102>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d103      	bne.n	8003dc6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <UART_Start_Receive_IT+0x184>)
 8003dc2:	669a      	str	r2, [r3, #104]	; 0x68
 8003dc4:	e002      	b.n	8003dcc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a20      	ldr	r2, [pc, #128]	; (8003e4c <UART_Start_Receive_IT+0x188>)
 8003dca:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d019      	beq.n	8003e08 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003de8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
 8003df4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e6      	bne.n	8003dd4 <UART_Start_Receive_IT+0x110>
 8003e06:	e018      	b.n	8003e3a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	613b      	str	r3, [r7, #16]
   return(result);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f043 0320 	orr.w	r3, r3, #32
 8003e1c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e26:	623b      	str	r3, [r7, #32]
 8003e28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	69f9      	ldr	r1, [r7, #28]
 8003e2c:	6a3a      	ldr	r2, [r7, #32]
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e6      	bne.n	8003e08 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	375c      	adds	r7, #92	; 0x5c
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	08004141 	.word	0x08004141
 8003e4c:	08003f99 	.word	0x08003f99

08003e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b095      	sub	sp, #84	; 0x54
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e76:	643b      	str	r3, [r7, #64]	; 0x40
 8003e78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e6      	bne.n	8003e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3308      	adds	r3, #8
 8003e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e5      	bne.n	8003e8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d118      	bne.n	8003ef8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f023 0310 	bic.w	r3, r3, #16
 8003eda:	647b      	str	r3, [r7, #68]	; 0x44
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6979      	ldr	r1, [r7, #20]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e6      	bne.n	8003ec6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f0c:	bf00      	nop
 8003f0e:	3754      	adds	r7, #84	; 0x54
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f7ff fb28 	bl	800358c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f3c:	bf00      	nop
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	e853 3f00 	ldrex	r3, [r3]
 8003f58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	61bb      	str	r3, [r7, #24]
 8003f6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	6979      	ldr	r1, [r7, #20]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	613b      	str	r3, [r7, #16]
   return(result);
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e6      	bne.n	8003f4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff faf4 	bl	8003578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f90:	bf00      	nop
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b09c      	sub	sp, #112	; 0x70
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fa6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb0:	2b22      	cmp	r3, #34	; 0x22
 8003fb2:	f040 80b9 	bne.w	8004128 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003fc4:	b2d9      	uxtb	r1, r3
 8003fc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f040 809c 	bne.w	8004138 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800400e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004010:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004014:	66bb      	str	r3, [r7, #104]	; 0x68
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800401e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004020:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800402c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e6      	bne.n	8004000 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3308      	adds	r3, #8
 8004038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	667b      	str	r3, [r7, #100]	; 0x64
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3308      	adds	r3, #8
 8004050:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004052:	647a      	str	r2, [r7, #68]	; 0x44
 8004054:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e5      	bne.n	8004032 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d018      	beq.n	80040ba <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	623b      	str	r3, [r7, #32]
   return(result);
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800409c:	663b      	str	r3, [r7, #96]	; 0x60
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a6:	633b      	str	r3, [r7, #48]	; 0x30
 80040a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e6      	bne.n	8004088 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d12e      	bne.n	8004120 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f023 0310 	bic.w	r3, r3, #16
 80040dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	69b9      	ldr	r1, [r7, #24]
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	617b      	str	r3, [r7, #20]
   return(result);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e6      	bne.n	80040c8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b10      	cmp	r3, #16
 8004106:	d103      	bne.n	8004110 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2210      	movs	r2, #16
 800410e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fa41 	bl	80035a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800411e:	e00b      	b.n	8004138 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7fc fb11 	bl	8000748 <HAL_UART_RxCpltCallback>
}
 8004126:	e007      	b.n	8004138 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0208 	orr.w	r2, r2, #8
 8004136:	619a      	str	r2, [r3, #24]
}
 8004138:	bf00      	nop
 800413a:	3770      	adds	r7, #112	; 0x70
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b09c      	sub	sp, #112	; 0x70
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800414e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004158:	2b22      	cmp	r3, #34	; 0x22
 800415a:	f040 80b9 	bne.w	80042d0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004164:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800416e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004172:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004176:	4013      	ands	r3, r2
 8004178:	b29a      	uxth	r2, r3
 800417a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800417c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	1c9a      	adds	r2, r3, #2
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f040 809c 	bne.w	80042e0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80041b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041bc:	667b      	str	r3, [r7, #100]	; 0x64
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c6:	657b      	str	r3, [r7, #84]	; 0x54
 80041c8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e6      	bne.n	80041a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3308      	adds	r3, #8
 80041e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	663b      	str	r3, [r7, #96]	; 0x60
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3308      	adds	r3, #8
 80041f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041fa:	643a      	str	r2, [r7, #64]	; 0x40
 80041fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004200:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e5      	bne.n	80041da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d018      	beq.n	8004262 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	61fb      	str	r3, [r7, #28]
   return(result);
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004244:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004250:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e6      	bne.n	8004230 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004266:	2b01      	cmp	r3, #1
 8004268:	d12e      	bne.n	80042c8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	60bb      	str	r3, [r7, #8]
   return(result);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f023 0310 	bic.w	r3, r3, #16
 8004284:	65bb      	str	r3, [r7, #88]	; 0x58
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6979      	ldr	r1, [r7, #20]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	613b      	str	r3, [r7, #16]
   return(result);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e6      	bne.n	8004270 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d103      	bne.n	80042b8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2210      	movs	r2, #16
 80042b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042be:	4619      	mov	r1, r3
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff f96d 	bl	80035a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042c6:	e00b      	b.n	80042e0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7fc fa3d 	bl	8000748 <HAL_UART_RxCpltCallback>
}
 80042ce:	e007      	b.n	80042e0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0208 	orr.w	r2, r2, #8
 80042de:	619a      	str	r2, [r3, #24]
}
 80042e0:	bf00      	nop
 80042e2:	3770      	adds	r7, #112	; 0x70
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <siprintf>:
 80042fc:	b40e      	push	{r1, r2, r3}
 80042fe:	b500      	push	{lr}
 8004300:	b09c      	sub	sp, #112	; 0x70
 8004302:	ab1d      	add	r3, sp, #116	; 0x74
 8004304:	9002      	str	r0, [sp, #8]
 8004306:	9006      	str	r0, [sp, #24]
 8004308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800430c:	4809      	ldr	r0, [pc, #36]	; (8004334 <siprintf+0x38>)
 800430e:	9107      	str	r1, [sp, #28]
 8004310:	9104      	str	r1, [sp, #16]
 8004312:	4909      	ldr	r1, [pc, #36]	; (8004338 <siprintf+0x3c>)
 8004314:	f853 2b04 	ldr.w	r2, [r3], #4
 8004318:	9105      	str	r1, [sp, #20]
 800431a:	6800      	ldr	r0, [r0, #0]
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	a902      	add	r1, sp, #8
 8004320:	f000 f992 	bl	8004648 <_svfiprintf_r>
 8004324:	9b02      	ldr	r3, [sp, #8]
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	b01c      	add	sp, #112	; 0x70
 800432c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004330:	b003      	add	sp, #12
 8004332:	4770      	bx	lr
 8004334:	20000060 	.word	0x20000060
 8004338:	ffff0208 	.word	0xffff0208

0800433c <memset>:
 800433c:	4402      	add	r2, r0
 800433e:	4603      	mov	r3, r0
 8004340:	4293      	cmp	r3, r2
 8004342:	d100      	bne.n	8004346 <memset+0xa>
 8004344:	4770      	bx	lr
 8004346:	f803 1b01 	strb.w	r1, [r3], #1
 800434a:	e7f9      	b.n	8004340 <memset+0x4>

0800434c <__errno>:
 800434c:	4b01      	ldr	r3, [pc, #4]	; (8004354 <__errno+0x8>)
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000060 	.word	0x20000060

08004358 <__libc_init_array>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4d0d      	ldr	r5, [pc, #52]	; (8004390 <__libc_init_array+0x38>)
 800435c:	4c0d      	ldr	r4, [pc, #52]	; (8004394 <__libc_init_array+0x3c>)
 800435e:	1b64      	subs	r4, r4, r5
 8004360:	10a4      	asrs	r4, r4, #2
 8004362:	2600      	movs	r6, #0
 8004364:	42a6      	cmp	r6, r4
 8004366:	d109      	bne.n	800437c <__libc_init_array+0x24>
 8004368:	4d0b      	ldr	r5, [pc, #44]	; (8004398 <__libc_init_array+0x40>)
 800436a:	4c0c      	ldr	r4, [pc, #48]	; (800439c <__libc_init_array+0x44>)
 800436c:	f000 fc6a 	bl	8004c44 <_init>
 8004370:	1b64      	subs	r4, r4, r5
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	2600      	movs	r6, #0
 8004376:	42a6      	cmp	r6, r4
 8004378:	d105      	bne.n	8004386 <__libc_init_array+0x2e>
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004380:	4798      	blx	r3
 8004382:	3601      	adds	r6, #1
 8004384:	e7ee      	b.n	8004364 <__libc_init_array+0xc>
 8004386:	f855 3b04 	ldr.w	r3, [r5], #4
 800438a:	4798      	blx	r3
 800438c:	3601      	adds	r6, #1
 800438e:	e7f2      	b.n	8004376 <__libc_init_array+0x1e>
 8004390:	08004d0c 	.word	0x08004d0c
 8004394:	08004d0c 	.word	0x08004d0c
 8004398:	08004d0c 	.word	0x08004d0c
 800439c:	08004d10 	.word	0x08004d10

080043a0 <__retarget_lock_acquire_recursive>:
 80043a0:	4770      	bx	lr

080043a2 <__retarget_lock_release_recursive>:
 80043a2:	4770      	bx	lr

080043a4 <_free_r>:
 80043a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043a6:	2900      	cmp	r1, #0
 80043a8:	d044      	beq.n	8004434 <_free_r+0x90>
 80043aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ae:	9001      	str	r0, [sp, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f1a1 0404 	sub.w	r4, r1, #4
 80043b6:	bfb8      	it	lt
 80043b8:	18e4      	addlt	r4, r4, r3
 80043ba:	f000 f8df 	bl	800457c <__malloc_lock>
 80043be:	4a1e      	ldr	r2, [pc, #120]	; (8004438 <_free_r+0x94>)
 80043c0:	9801      	ldr	r0, [sp, #4]
 80043c2:	6813      	ldr	r3, [r2, #0]
 80043c4:	b933      	cbnz	r3, 80043d4 <_free_r+0x30>
 80043c6:	6063      	str	r3, [r4, #4]
 80043c8:	6014      	str	r4, [r2, #0]
 80043ca:	b003      	add	sp, #12
 80043cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043d0:	f000 b8da 	b.w	8004588 <__malloc_unlock>
 80043d4:	42a3      	cmp	r3, r4
 80043d6:	d908      	bls.n	80043ea <_free_r+0x46>
 80043d8:	6825      	ldr	r5, [r4, #0]
 80043da:	1961      	adds	r1, r4, r5
 80043dc:	428b      	cmp	r3, r1
 80043de:	bf01      	itttt	eq
 80043e0:	6819      	ldreq	r1, [r3, #0]
 80043e2:	685b      	ldreq	r3, [r3, #4]
 80043e4:	1949      	addeq	r1, r1, r5
 80043e6:	6021      	streq	r1, [r4, #0]
 80043e8:	e7ed      	b.n	80043c6 <_free_r+0x22>
 80043ea:	461a      	mov	r2, r3
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	b10b      	cbz	r3, 80043f4 <_free_r+0x50>
 80043f0:	42a3      	cmp	r3, r4
 80043f2:	d9fa      	bls.n	80043ea <_free_r+0x46>
 80043f4:	6811      	ldr	r1, [r2, #0]
 80043f6:	1855      	adds	r5, r2, r1
 80043f8:	42a5      	cmp	r5, r4
 80043fa:	d10b      	bne.n	8004414 <_free_r+0x70>
 80043fc:	6824      	ldr	r4, [r4, #0]
 80043fe:	4421      	add	r1, r4
 8004400:	1854      	adds	r4, r2, r1
 8004402:	42a3      	cmp	r3, r4
 8004404:	6011      	str	r1, [r2, #0]
 8004406:	d1e0      	bne.n	80043ca <_free_r+0x26>
 8004408:	681c      	ldr	r4, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	6053      	str	r3, [r2, #4]
 800440e:	440c      	add	r4, r1
 8004410:	6014      	str	r4, [r2, #0]
 8004412:	e7da      	b.n	80043ca <_free_r+0x26>
 8004414:	d902      	bls.n	800441c <_free_r+0x78>
 8004416:	230c      	movs	r3, #12
 8004418:	6003      	str	r3, [r0, #0]
 800441a:	e7d6      	b.n	80043ca <_free_r+0x26>
 800441c:	6825      	ldr	r5, [r4, #0]
 800441e:	1961      	adds	r1, r4, r5
 8004420:	428b      	cmp	r3, r1
 8004422:	bf04      	itt	eq
 8004424:	6819      	ldreq	r1, [r3, #0]
 8004426:	685b      	ldreq	r3, [r3, #4]
 8004428:	6063      	str	r3, [r4, #4]
 800442a:	bf04      	itt	eq
 800442c:	1949      	addeq	r1, r1, r5
 800442e:	6021      	streq	r1, [r4, #0]
 8004430:	6054      	str	r4, [r2, #4]
 8004432:	e7ca      	b.n	80043ca <_free_r+0x26>
 8004434:	b003      	add	sp, #12
 8004436:	bd30      	pop	{r4, r5, pc}
 8004438:	200002e8 	.word	0x200002e8

0800443c <sbrk_aligned>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	4e0e      	ldr	r6, [pc, #56]	; (8004478 <sbrk_aligned+0x3c>)
 8004440:	460c      	mov	r4, r1
 8004442:	6831      	ldr	r1, [r6, #0]
 8004444:	4605      	mov	r5, r0
 8004446:	b911      	cbnz	r1, 800444e <sbrk_aligned+0x12>
 8004448:	f000 fba6 	bl	8004b98 <_sbrk_r>
 800444c:	6030      	str	r0, [r6, #0]
 800444e:	4621      	mov	r1, r4
 8004450:	4628      	mov	r0, r5
 8004452:	f000 fba1 	bl	8004b98 <_sbrk_r>
 8004456:	1c43      	adds	r3, r0, #1
 8004458:	d00a      	beq.n	8004470 <sbrk_aligned+0x34>
 800445a:	1cc4      	adds	r4, r0, #3
 800445c:	f024 0403 	bic.w	r4, r4, #3
 8004460:	42a0      	cmp	r0, r4
 8004462:	d007      	beq.n	8004474 <sbrk_aligned+0x38>
 8004464:	1a21      	subs	r1, r4, r0
 8004466:	4628      	mov	r0, r5
 8004468:	f000 fb96 	bl	8004b98 <_sbrk_r>
 800446c:	3001      	adds	r0, #1
 800446e:	d101      	bne.n	8004474 <sbrk_aligned+0x38>
 8004470:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004474:	4620      	mov	r0, r4
 8004476:	bd70      	pop	{r4, r5, r6, pc}
 8004478:	200002ec 	.word	0x200002ec

0800447c <_malloc_r>:
 800447c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004480:	1ccd      	adds	r5, r1, #3
 8004482:	f025 0503 	bic.w	r5, r5, #3
 8004486:	3508      	adds	r5, #8
 8004488:	2d0c      	cmp	r5, #12
 800448a:	bf38      	it	cc
 800448c:	250c      	movcc	r5, #12
 800448e:	2d00      	cmp	r5, #0
 8004490:	4607      	mov	r7, r0
 8004492:	db01      	blt.n	8004498 <_malloc_r+0x1c>
 8004494:	42a9      	cmp	r1, r5
 8004496:	d905      	bls.n	80044a4 <_malloc_r+0x28>
 8004498:	230c      	movs	r3, #12
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	2600      	movs	r6, #0
 800449e:	4630      	mov	r0, r6
 80044a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004578 <_malloc_r+0xfc>
 80044a8:	f000 f868 	bl	800457c <__malloc_lock>
 80044ac:	f8d8 3000 	ldr.w	r3, [r8]
 80044b0:	461c      	mov	r4, r3
 80044b2:	bb5c      	cbnz	r4, 800450c <_malloc_r+0x90>
 80044b4:	4629      	mov	r1, r5
 80044b6:	4638      	mov	r0, r7
 80044b8:	f7ff ffc0 	bl	800443c <sbrk_aligned>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	4604      	mov	r4, r0
 80044c0:	d155      	bne.n	800456e <_malloc_r+0xf2>
 80044c2:	f8d8 4000 	ldr.w	r4, [r8]
 80044c6:	4626      	mov	r6, r4
 80044c8:	2e00      	cmp	r6, #0
 80044ca:	d145      	bne.n	8004558 <_malloc_r+0xdc>
 80044cc:	2c00      	cmp	r4, #0
 80044ce:	d048      	beq.n	8004562 <_malloc_r+0xe6>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	4631      	mov	r1, r6
 80044d4:	4638      	mov	r0, r7
 80044d6:	eb04 0903 	add.w	r9, r4, r3
 80044da:	f000 fb5d 	bl	8004b98 <_sbrk_r>
 80044de:	4581      	cmp	r9, r0
 80044e0:	d13f      	bne.n	8004562 <_malloc_r+0xe6>
 80044e2:	6821      	ldr	r1, [r4, #0]
 80044e4:	1a6d      	subs	r5, r5, r1
 80044e6:	4629      	mov	r1, r5
 80044e8:	4638      	mov	r0, r7
 80044ea:	f7ff ffa7 	bl	800443c <sbrk_aligned>
 80044ee:	3001      	adds	r0, #1
 80044f0:	d037      	beq.n	8004562 <_malloc_r+0xe6>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	442b      	add	r3, r5
 80044f6:	6023      	str	r3, [r4, #0]
 80044f8:	f8d8 3000 	ldr.w	r3, [r8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d038      	beq.n	8004572 <_malloc_r+0xf6>
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	42a2      	cmp	r2, r4
 8004504:	d12b      	bne.n	800455e <_malloc_r+0xe2>
 8004506:	2200      	movs	r2, #0
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	e00f      	b.n	800452c <_malloc_r+0xb0>
 800450c:	6822      	ldr	r2, [r4, #0]
 800450e:	1b52      	subs	r2, r2, r5
 8004510:	d41f      	bmi.n	8004552 <_malloc_r+0xd6>
 8004512:	2a0b      	cmp	r2, #11
 8004514:	d917      	bls.n	8004546 <_malloc_r+0xca>
 8004516:	1961      	adds	r1, r4, r5
 8004518:	42a3      	cmp	r3, r4
 800451a:	6025      	str	r5, [r4, #0]
 800451c:	bf18      	it	ne
 800451e:	6059      	strne	r1, [r3, #4]
 8004520:	6863      	ldr	r3, [r4, #4]
 8004522:	bf08      	it	eq
 8004524:	f8c8 1000 	streq.w	r1, [r8]
 8004528:	5162      	str	r2, [r4, r5]
 800452a:	604b      	str	r3, [r1, #4]
 800452c:	4638      	mov	r0, r7
 800452e:	f104 060b 	add.w	r6, r4, #11
 8004532:	f000 f829 	bl	8004588 <__malloc_unlock>
 8004536:	f026 0607 	bic.w	r6, r6, #7
 800453a:	1d23      	adds	r3, r4, #4
 800453c:	1af2      	subs	r2, r6, r3
 800453e:	d0ae      	beq.n	800449e <_malloc_r+0x22>
 8004540:	1b9b      	subs	r3, r3, r6
 8004542:	50a3      	str	r3, [r4, r2]
 8004544:	e7ab      	b.n	800449e <_malloc_r+0x22>
 8004546:	42a3      	cmp	r3, r4
 8004548:	6862      	ldr	r2, [r4, #4]
 800454a:	d1dd      	bne.n	8004508 <_malloc_r+0x8c>
 800454c:	f8c8 2000 	str.w	r2, [r8]
 8004550:	e7ec      	b.n	800452c <_malloc_r+0xb0>
 8004552:	4623      	mov	r3, r4
 8004554:	6864      	ldr	r4, [r4, #4]
 8004556:	e7ac      	b.n	80044b2 <_malloc_r+0x36>
 8004558:	4634      	mov	r4, r6
 800455a:	6876      	ldr	r6, [r6, #4]
 800455c:	e7b4      	b.n	80044c8 <_malloc_r+0x4c>
 800455e:	4613      	mov	r3, r2
 8004560:	e7cc      	b.n	80044fc <_malloc_r+0x80>
 8004562:	230c      	movs	r3, #12
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4638      	mov	r0, r7
 8004568:	f000 f80e 	bl	8004588 <__malloc_unlock>
 800456c:	e797      	b.n	800449e <_malloc_r+0x22>
 800456e:	6025      	str	r5, [r4, #0]
 8004570:	e7dc      	b.n	800452c <_malloc_r+0xb0>
 8004572:	605b      	str	r3, [r3, #4]
 8004574:	deff      	udf	#255	; 0xff
 8004576:	bf00      	nop
 8004578:	200002e8 	.word	0x200002e8

0800457c <__malloc_lock>:
 800457c:	4801      	ldr	r0, [pc, #4]	; (8004584 <__malloc_lock+0x8>)
 800457e:	f7ff bf0f 	b.w	80043a0 <__retarget_lock_acquire_recursive>
 8004582:	bf00      	nop
 8004584:	200002e4 	.word	0x200002e4

08004588 <__malloc_unlock>:
 8004588:	4801      	ldr	r0, [pc, #4]	; (8004590 <__malloc_unlock+0x8>)
 800458a:	f7ff bf0a 	b.w	80043a2 <__retarget_lock_release_recursive>
 800458e:	bf00      	nop
 8004590:	200002e4 	.word	0x200002e4

08004594 <__ssputs_r>:
 8004594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	688e      	ldr	r6, [r1, #8]
 800459a:	461f      	mov	r7, r3
 800459c:	42be      	cmp	r6, r7
 800459e:	680b      	ldr	r3, [r1, #0]
 80045a0:	4682      	mov	sl, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	4690      	mov	r8, r2
 80045a6:	d82c      	bhi.n	8004602 <__ssputs_r+0x6e>
 80045a8:	898a      	ldrh	r2, [r1, #12]
 80045aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045ae:	d026      	beq.n	80045fe <__ssputs_r+0x6a>
 80045b0:	6965      	ldr	r5, [r4, #20]
 80045b2:	6909      	ldr	r1, [r1, #16]
 80045b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045b8:	eba3 0901 	sub.w	r9, r3, r1
 80045bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045c0:	1c7b      	adds	r3, r7, #1
 80045c2:	444b      	add	r3, r9
 80045c4:	106d      	asrs	r5, r5, #1
 80045c6:	429d      	cmp	r5, r3
 80045c8:	bf38      	it	cc
 80045ca:	461d      	movcc	r5, r3
 80045cc:	0553      	lsls	r3, r2, #21
 80045ce:	d527      	bpl.n	8004620 <__ssputs_r+0x8c>
 80045d0:	4629      	mov	r1, r5
 80045d2:	f7ff ff53 	bl	800447c <_malloc_r>
 80045d6:	4606      	mov	r6, r0
 80045d8:	b360      	cbz	r0, 8004634 <__ssputs_r+0xa0>
 80045da:	6921      	ldr	r1, [r4, #16]
 80045dc:	464a      	mov	r2, r9
 80045de:	f000 faeb 	bl	8004bb8 <memcpy>
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ec:	81a3      	strh	r3, [r4, #12]
 80045ee:	6126      	str	r6, [r4, #16]
 80045f0:	6165      	str	r5, [r4, #20]
 80045f2:	444e      	add	r6, r9
 80045f4:	eba5 0509 	sub.w	r5, r5, r9
 80045f8:	6026      	str	r6, [r4, #0]
 80045fa:	60a5      	str	r5, [r4, #8]
 80045fc:	463e      	mov	r6, r7
 80045fe:	42be      	cmp	r6, r7
 8004600:	d900      	bls.n	8004604 <__ssputs_r+0x70>
 8004602:	463e      	mov	r6, r7
 8004604:	6820      	ldr	r0, [r4, #0]
 8004606:	4632      	mov	r2, r6
 8004608:	4641      	mov	r1, r8
 800460a:	f000 faab 	bl	8004b64 <memmove>
 800460e:	68a3      	ldr	r3, [r4, #8]
 8004610:	1b9b      	subs	r3, r3, r6
 8004612:	60a3      	str	r3, [r4, #8]
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	4433      	add	r3, r6
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	2000      	movs	r0, #0
 800461c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004620:	462a      	mov	r2, r5
 8004622:	f000 fad7 	bl	8004bd4 <_realloc_r>
 8004626:	4606      	mov	r6, r0
 8004628:	2800      	cmp	r0, #0
 800462a:	d1e0      	bne.n	80045ee <__ssputs_r+0x5a>
 800462c:	6921      	ldr	r1, [r4, #16]
 800462e:	4650      	mov	r0, sl
 8004630:	f7ff feb8 	bl	80043a4 <_free_r>
 8004634:	230c      	movs	r3, #12
 8004636:	f8ca 3000 	str.w	r3, [sl]
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004640:	81a3      	strh	r3, [r4, #12]
 8004642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004646:	e7e9      	b.n	800461c <__ssputs_r+0x88>

08004648 <_svfiprintf_r>:
 8004648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464c:	4698      	mov	r8, r3
 800464e:	898b      	ldrh	r3, [r1, #12]
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	b09d      	sub	sp, #116	; 0x74
 8004654:	4607      	mov	r7, r0
 8004656:	460d      	mov	r5, r1
 8004658:	4614      	mov	r4, r2
 800465a:	d50e      	bpl.n	800467a <_svfiprintf_r+0x32>
 800465c:	690b      	ldr	r3, [r1, #16]
 800465e:	b963      	cbnz	r3, 800467a <_svfiprintf_r+0x32>
 8004660:	2140      	movs	r1, #64	; 0x40
 8004662:	f7ff ff0b 	bl	800447c <_malloc_r>
 8004666:	6028      	str	r0, [r5, #0]
 8004668:	6128      	str	r0, [r5, #16]
 800466a:	b920      	cbnz	r0, 8004676 <_svfiprintf_r+0x2e>
 800466c:	230c      	movs	r3, #12
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004674:	e0d0      	b.n	8004818 <_svfiprintf_r+0x1d0>
 8004676:	2340      	movs	r3, #64	; 0x40
 8004678:	616b      	str	r3, [r5, #20]
 800467a:	2300      	movs	r3, #0
 800467c:	9309      	str	r3, [sp, #36]	; 0x24
 800467e:	2320      	movs	r3, #32
 8004680:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004684:	f8cd 800c 	str.w	r8, [sp, #12]
 8004688:	2330      	movs	r3, #48	; 0x30
 800468a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004830 <_svfiprintf_r+0x1e8>
 800468e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004692:	f04f 0901 	mov.w	r9, #1
 8004696:	4623      	mov	r3, r4
 8004698:	469a      	mov	sl, r3
 800469a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800469e:	b10a      	cbz	r2, 80046a4 <_svfiprintf_r+0x5c>
 80046a0:	2a25      	cmp	r2, #37	; 0x25
 80046a2:	d1f9      	bne.n	8004698 <_svfiprintf_r+0x50>
 80046a4:	ebba 0b04 	subs.w	fp, sl, r4
 80046a8:	d00b      	beq.n	80046c2 <_svfiprintf_r+0x7a>
 80046aa:	465b      	mov	r3, fp
 80046ac:	4622      	mov	r2, r4
 80046ae:	4629      	mov	r1, r5
 80046b0:	4638      	mov	r0, r7
 80046b2:	f7ff ff6f 	bl	8004594 <__ssputs_r>
 80046b6:	3001      	adds	r0, #1
 80046b8:	f000 80a9 	beq.w	800480e <_svfiprintf_r+0x1c6>
 80046bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046be:	445a      	add	r2, fp
 80046c0:	9209      	str	r2, [sp, #36]	; 0x24
 80046c2:	f89a 3000 	ldrb.w	r3, [sl]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80a1 	beq.w	800480e <_svfiprintf_r+0x1c6>
 80046cc:	2300      	movs	r3, #0
 80046ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046d6:	f10a 0a01 	add.w	sl, sl, #1
 80046da:	9304      	str	r3, [sp, #16]
 80046dc:	9307      	str	r3, [sp, #28]
 80046de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046e2:	931a      	str	r3, [sp, #104]	; 0x68
 80046e4:	4654      	mov	r4, sl
 80046e6:	2205      	movs	r2, #5
 80046e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ec:	4850      	ldr	r0, [pc, #320]	; (8004830 <_svfiprintf_r+0x1e8>)
 80046ee:	f7fb fd8f 	bl	8000210 <memchr>
 80046f2:	9a04      	ldr	r2, [sp, #16]
 80046f4:	b9d8      	cbnz	r0, 800472e <_svfiprintf_r+0xe6>
 80046f6:	06d0      	lsls	r0, r2, #27
 80046f8:	bf44      	itt	mi
 80046fa:	2320      	movmi	r3, #32
 80046fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004700:	0711      	lsls	r1, r2, #28
 8004702:	bf44      	itt	mi
 8004704:	232b      	movmi	r3, #43	; 0x2b
 8004706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800470a:	f89a 3000 	ldrb.w	r3, [sl]
 800470e:	2b2a      	cmp	r3, #42	; 0x2a
 8004710:	d015      	beq.n	800473e <_svfiprintf_r+0xf6>
 8004712:	9a07      	ldr	r2, [sp, #28]
 8004714:	4654      	mov	r4, sl
 8004716:	2000      	movs	r0, #0
 8004718:	f04f 0c0a 	mov.w	ip, #10
 800471c:	4621      	mov	r1, r4
 800471e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004722:	3b30      	subs	r3, #48	; 0x30
 8004724:	2b09      	cmp	r3, #9
 8004726:	d94d      	bls.n	80047c4 <_svfiprintf_r+0x17c>
 8004728:	b1b0      	cbz	r0, 8004758 <_svfiprintf_r+0x110>
 800472a:	9207      	str	r2, [sp, #28]
 800472c:	e014      	b.n	8004758 <_svfiprintf_r+0x110>
 800472e:	eba0 0308 	sub.w	r3, r0, r8
 8004732:	fa09 f303 	lsl.w	r3, r9, r3
 8004736:	4313      	orrs	r3, r2
 8004738:	9304      	str	r3, [sp, #16]
 800473a:	46a2      	mov	sl, r4
 800473c:	e7d2      	b.n	80046e4 <_svfiprintf_r+0x9c>
 800473e:	9b03      	ldr	r3, [sp, #12]
 8004740:	1d19      	adds	r1, r3, #4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	9103      	str	r1, [sp, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	bfbb      	ittet	lt
 800474a:	425b      	neglt	r3, r3
 800474c:	f042 0202 	orrlt.w	r2, r2, #2
 8004750:	9307      	strge	r3, [sp, #28]
 8004752:	9307      	strlt	r3, [sp, #28]
 8004754:	bfb8      	it	lt
 8004756:	9204      	strlt	r2, [sp, #16]
 8004758:	7823      	ldrb	r3, [r4, #0]
 800475a:	2b2e      	cmp	r3, #46	; 0x2e
 800475c:	d10c      	bne.n	8004778 <_svfiprintf_r+0x130>
 800475e:	7863      	ldrb	r3, [r4, #1]
 8004760:	2b2a      	cmp	r3, #42	; 0x2a
 8004762:	d134      	bne.n	80047ce <_svfiprintf_r+0x186>
 8004764:	9b03      	ldr	r3, [sp, #12]
 8004766:	1d1a      	adds	r2, r3, #4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	9203      	str	r2, [sp, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	bfb8      	it	lt
 8004770:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004774:	3402      	adds	r4, #2
 8004776:	9305      	str	r3, [sp, #20]
 8004778:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004840 <_svfiprintf_r+0x1f8>
 800477c:	7821      	ldrb	r1, [r4, #0]
 800477e:	2203      	movs	r2, #3
 8004780:	4650      	mov	r0, sl
 8004782:	f7fb fd45 	bl	8000210 <memchr>
 8004786:	b138      	cbz	r0, 8004798 <_svfiprintf_r+0x150>
 8004788:	9b04      	ldr	r3, [sp, #16]
 800478a:	eba0 000a 	sub.w	r0, r0, sl
 800478e:	2240      	movs	r2, #64	; 0x40
 8004790:	4082      	lsls	r2, r0
 8004792:	4313      	orrs	r3, r2
 8004794:	3401      	adds	r4, #1
 8004796:	9304      	str	r3, [sp, #16]
 8004798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800479c:	4825      	ldr	r0, [pc, #148]	; (8004834 <_svfiprintf_r+0x1ec>)
 800479e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047a2:	2206      	movs	r2, #6
 80047a4:	f7fb fd34 	bl	8000210 <memchr>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d038      	beq.n	800481e <_svfiprintf_r+0x1d6>
 80047ac:	4b22      	ldr	r3, [pc, #136]	; (8004838 <_svfiprintf_r+0x1f0>)
 80047ae:	bb1b      	cbnz	r3, 80047f8 <_svfiprintf_r+0x1b0>
 80047b0:	9b03      	ldr	r3, [sp, #12]
 80047b2:	3307      	adds	r3, #7
 80047b4:	f023 0307 	bic.w	r3, r3, #7
 80047b8:	3308      	adds	r3, #8
 80047ba:	9303      	str	r3, [sp, #12]
 80047bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047be:	4433      	add	r3, r6
 80047c0:	9309      	str	r3, [sp, #36]	; 0x24
 80047c2:	e768      	b.n	8004696 <_svfiprintf_r+0x4e>
 80047c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80047c8:	460c      	mov	r4, r1
 80047ca:	2001      	movs	r0, #1
 80047cc:	e7a6      	b.n	800471c <_svfiprintf_r+0xd4>
 80047ce:	2300      	movs	r3, #0
 80047d0:	3401      	adds	r4, #1
 80047d2:	9305      	str	r3, [sp, #20]
 80047d4:	4619      	mov	r1, r3
 80047d6:	f04f 0c0a 	mov.w	ip, #10
 80047da:	4620      	mov	r0, r4
 80047dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047e0:	3a30      	subs	r2, #48	; 0x30
 80047e2:	2a09      	cmp	r2, #9
 80047e4:	d903      	bls.n	80047ee <_svfiprintf_r+0x1a6>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0c6      	beq.n	8004778 <_svfiprintf_r+0x130>
 80047ea:	9105      	str	r1, [sp, #20]
 80047ec:	e7c4      	b.n	8004778 <_svfiprintf_r+0x130>
 80047ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80047f2:	4604      	mov	r4, r0
 80047f4:	2301      	movs	r3, #1
 80047f6:	e7f0      	b.n	80047da <_svfiprintf_r+0x192>
 80047f8:	ab03      	add	r3, sp, #12
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	462a      	mov	r2, r5
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <_svfiprintf_r+0x1f4>)
 8004800:	a904      	add	r1, sp, #16
 8004802:	4638      	mov	r0, r7
 8004804:	f3af 8000 	nop.w
 8004808:	1c42      	adds	r2, r0, #1
 800480a:	4606      	mov	r6, r0
 800480c:	d1d6      	bne.n	80047bc <_svfiprintf_r+0x174>
 800480e:	89ab      	ldrh	r3, [r5, #12]
 8004810:	065b      	lsls	r3, r3, #25
 8004812:	f53f af2d 	bmi.w	8004670 <_svfiprintf_r+0x28>
 8004816:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004818:	b01d      	add	sp, #116	; 0x74
 800481a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481e:	ab03      	add	r3, sp, #12
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	462a      	mov	r2, r5
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <_svfiprintf_r+0x1f4>)
 8004826:	a904      	add	r1, sp, #16
 8004828:	4638      	mov	r0, r7
 800482a:	f000 f879 	bl	8004920 <_printf_i>
 800482e:	e7eb      	b.n	8004808 <_svfiprintf_r+0x1c0>
 8004830:	08004cd8 	.word	0x08004cd8
 8004834:	08004ce2 	.word	0x08004ce2
 8004838:	00000000 	.word	0x00000000
 800483c:	08004595 	.word	0x08004595
 8004840:	08004cde 	.word	0x08004cde

08004844 <_printf_common>:
 8004844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004848:	4616      	mov	r6, r2
 800484a:	4699      	mov	r9, r3
 800484c:	688a      	ldr	r2, [r1, #8]
 800484e:	690b      	ldr	r3, [r1, #16]
 8004850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004854:	4293      	cmp	r3, r2
 8004856:	bfb8      	it	lt
 8004858:	4613      	movlt	r3, r2
 800485a:	6033      	str	r3, [r6, #0]
 800485c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004860:	4607      	mov	r7, r0
 8004862:	460c      	mov	r4, r1
 8004864:	b10a      	cbz	r2, 800486a <_printf_common+0x26>
 8004866:	3301      	adds	r3, #1
 8004868:	6033      	str	r3, [r6, #0]
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	0699      	lsls	r1, r3, #26
 800486e:	bf42      	ittt	mi
 8004870:	6833      	ldrmi	r3, [r6, #0]
 8004872:	3302      	addmi	r3, #2
 8004874:	6033      	strmi	r3, [r6, #0]
 8004876:	6825      	ldr	r5, [r4, #0]
 8004878:	f015 0506 	ands.w	r5, r5, #6
 800487c:	d106      	bne.n	800488c <_printf_common+0x48>
 800487e:	f104 0a19 	add.w	sl, r4, #25
 8004882:	68e3      	ldr	r3, [r4, #12]
 8004884:	6832      	ldr	r2, [r6, #0]
 8004886:	1a9b      	subs	r3, r3, r2
 8004888:	42ab      	cmp	r3, r5
 800488a:	dc26      	bgt.n	80048da <_printf_common+0x96>
 800488c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004890:	1e13      	subs	r3, r2, #0
 8004892:	6822      	ldr	r2, [r4, #0]
 8004894:	bf18      	it	ne
 8004896:	2301      	movne	r3, #1
 8004898:	0692      	lsls	r2, r2, #26
 800489a:	d42b      	bmi.n	80048f4 <_printf_common+0xb0>
 800489c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048a0:	4649      	mov	r1, r9
 80048a2:	4638      	mov	r0, r7
 80048a4:	47c0      	blx	r8
 80048a6:	3001      	adds	r0, #1
 80048a8:	d01e      	beq.n	80048e8 <_printf_common+0xa4>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	6922      	ldr	r2, [r4, #16]
 80048ae:	f003 0306 	and.w	r3, r3, #6
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	bf02      	ittt	eq
 80048b6:	68e5      	ldreq	r5, [r4, #12]
 80048b8:	6833      	ldreq	r3, [r6, #0]
 80048ba:	1aed      	subeq	r5, r5, r3
 80048bc:	68a3      	ldr	r3, [r4, #8]
 80048be:	bf0c      	ite	eq
 80048c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048c4:	2500      	movne	r5, #0
 80048c6:	4293      	cmp	r3, r2
 80048c8:	bfc4      	itt	gt
 80048ca:	1a9b      	subgt	r3, r3, r2
 80048cc:	18ed      	addgt	r5, r5, r3
 80048ce:	2600      	movs	r6, #0
 80048d0:	341a      	adds	r4, #26
 80048d2:	42b5      	cmp	r5, r6
 80048d4:	d11a      	bne.n	800490c <_printf_common+0xc8>
 80048d6:	2000      	movs	r0, #0
 80048d8:	e008      	b.n	80048ec <_printf_common+0xa8>
 80048da:	2301      	movs	r3, #1
 80048dc:	4652      	mov	r2, sl
 80048de:	4649      	mov	r1, r9
 80048e0:	4638      	mov	r0, r7
 80048e2:	47c0      	blx	r8
 80048e4:	3001      	adds	r0, #1
 80048e6:	d103      	bne.n	80048f0 <_printf_common+0xac>
 80048e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f0:	3501      	adds	r5, #1
 80048f2:	e7c6      	b.n	8004882 <_printf_common+0x3e>
 80048f4:	18e1      	adds	r1, r4, r3
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	2030      	movs	r0, #48	; 0x30
 80048fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048fe:	4422      	add	r2, r4
 8004900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004908:	3302      	adds	r3, #2
 800490a:	e7c7      	b.n	800489c <_printf_common+0x58>
 800490c:	2301      	movs	r3, #1
 800490e:	4622      	mov	r2, r4
 8004910:	4649      	mov	r1, r9
 8004912:	4638      	mov	r0, r7
 8004914:	47c0      	blx	r8
 8004916:	3001      	adds	r0, #1
 8004918:	d0e6      	beq.n	80048e8 <_printf_common+0xa4>
 800491a:	3601      	adds	r6, #1
 800491c:	e7d9      	b.n	80048d2 <_printf_common+0x8e>
	...

08004920 <_printf_i>:
 8004920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004924:	7e0f      	ldrb	r7, [r1, #24]
 8004926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004928:	2f78      	cmp	r7, #120	; 0x78
 800492a:	4691      	mov	r9, r2
 800492c:	4680      	mov	r8, r0
 800492e:	460c      	mov	r4, r1
 8004930:	469a      	mov	sl, r3
 8004932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004936:	d807      	bhi.n	8004948 <_printf_i+0x28>
 8004938:	2f62      	cmp	r7, #98	; 0x62
 800493a:	d80a      	bhi.n	8004952 <_printf_i+0x32>
 800493c:	2f00      	cmp	r7, #0
 800493e:	f000 80d4 	beq.w	8004aea <_printf_i+0x1ca>
 8004942:	2f58      	cmp	r7, #88	; 0x58
 8004944:	f000 80c0 	beq.w	8004ac8 <_printf_i+0x1a8>
 8004948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800494c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004950:	e03a      	b.n	80049c8 <_printf_i+0xa8>
 8004952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004956:	2b15      	cmp	r3, #21
 8004958:	d8f6      	bhi.n	8004948 <_printf_i+0x28>
 800495a:	a101      	add	r1, pc, #4	; (adr r1, 8004960 <_printf_i+0x40>)
 800495c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004960:	080049b9 	.word	0x080049b9
 8004964:	080049cd 	.word	0x080049cd
 8004968:	08004949 	.word	0x08004949
 800496c:	08004949 	.word	0x08004949
 8004970:	08004949 	.word	0x08004949
 8004974:	08004949 	.word	0x08004949
 8004978:	080049cd 	.word	0x080049cd
 800497c:	08004949 	.word	0x08004949
 8004980:	08004949 	.word	0x08004949
 8004984:	08004949 	.word	0x08004949
 8004988:	08004949 	.word	0x08004949
 800498c:	08004ad1 	.word	0x08004ad1
 8004990:	080049f9 	.word	0x080049f9
 8004994:	08004a8b 	.word	0x08004a8b
 8004998:	08004949 	.word	0x08004949
 800499c:	08004949 	.word	0x08004949
 80049a0:	08004af3 	.word	0x08004af3
 80049a4:	08004949 	.word	0x08004949
 80049a8:	080049f9 	.word	0x080049f9
 80049ac:	08004949 	.word	0x08004949
 80049b0:	08004949 	.word	0x08004949
 80049b4:	08004a93 	.word	0x08004a93
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	1d1a      	adds	r2, r3, #4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	602a      	str	r2, [r5, #0]
 80049c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049c8:	2301      	movs	r3, #1
 80049ca:	e09f      	b.n	8004b0c <_printf_i+0x1ec>
 80049cc:	6820      	ldr	r0, [r4, #0]
 80049ce:	682b      	ldr	r3, [r5, #0]
 80049d0:	0607      	lsls	r7, r0, #24
 80049d2:	f103 0104 	add.w	r1, r3, #4
 80049d6:	6029      	str	r1, [r5, #0]
 80049d8:	d501      	bpl.n	80049de <_printf_i+0xbe>
 80049da:	681e      	ldr	r6, [r3, #0]
 80049dc:	e003      	b.n	80049e6 <_printf_i+0xc6>
 80049de:	0646      	lsls	r6, r0, #25
 80049e0:	d5fb      	bpl.n	80049da <_printf_i+0xba>
 80049e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049e6:	2e00      	cmp	r6, #0
 80049e8:	da03      	bge.n	80049f2 <_printf_i+0xd2>
 80049ea:	232d      	movs	r3, #45	; 0x2d
 80049ec:	4276      	negs	r6, r6
 80049ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f2:	485a      	ldr	r0, [pc, #360]	; (8004b5c <_printf_i+0x23c>)
 80049f4:	230a      	movs	r3, #10
 80049f6:	e012      	b.n	8004a1e <_printf_i+0xfe>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	6820      	ldr	r0, [r4, #0]
 80049fc:	1d19      	adds	r1, r3, #4
 80049fe:	6029      	str	r1, [r5, #0]
 8004a00:	0605      	lsls	r5, r0, #24
 8004a02:	d501      	bpl.n	8004a08 <_printf_i+0xe8>
 8004a04:	681e      	ldr	r6, [r3, #0]
 8004a06:	e002      	b.n	8004a0e <_printf_i+0xee>
 8004a08:	0641      	lsls	r1, r0, #25
 8004a0a:	d5fb      	bpl.n	8004a04 <_printf_i+0xe4>
 8004a0c:	881e      	ldrh	r6, [r3, #0]
 8004a0e:	4853      	ldr	r0, [pc, #332]	; (8004b5c <_printf_i+0x23c>)
 8004a10:	2f6f      	cmp	r7, #111	; 0x6f
 8004a12:	bf0c      	ite	eq
 8004a14:	2308      	moveq	r3, #8
 8004a16:	230a      	movne	r3, #10
 8004a18:	2100      	movs	r1, #0
 8004a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a1e:	6865      	ldr	r5, [r4, #4]
 8004a20:	60a5      	str	r5, [r4, #8]
 8004a22:	2d00      	cmp	r5, #0
 8004a24:	bfa2      	ittt	ge
 8004a26:	6821      	ldrge	r1, [r4, #0]
 8004a28:	f021 0104 	bicge.w	r1, r1, #4
 8004a2c:	6021      	strge	r1, [r4, #0]
 8004a2e:	b90e      	cbnz	r6, 8004a34 <_printf_i+0x114>
 8004a30:	2d00      	cmp	r5, #0
 8004a32:	d04b      	beq.n	8004acc <_printf_i+0x1ac>
 8004a34:	4615      	mov	r5, r2
 8004a36:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a3a:	fb03 6711 	mls	r7, r3, r1, r6
 8004a3e:	5dc7      	ldrb	r7, [r0, r7]
 8004a40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a44:	4637      	mov	r7, r6
 8004a46:	42bb      	cmp	r3, r7
 8004a48:	460e      	mov	r6, r1
 8004a4a:	d9f4      	bls.n	8004a36 <_printf_i+0x116>
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d10b      	bne.n	8004a68 <_printf_i+0x148>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	07de      	lsls	r6, r3, #31
 8004a54:	d508      	bpl.n	8004a68 <_printf_i+0x148>
 8004a56:	6923      	ldr	r3, [r4, #16]
 8004a58:	6861      	ldr	r1, [r4, #4]
 8004a5a:	4299      	cmp	r1, r3
 8004a5c:	bfde      	ittt	le
 8004a5e:	2330      	movle	r3, #48	; 0x30
 8004a60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a68:	1b52      	subs	r2, r2, r5
 8004a6a:	6122      	str	r2, [r4, #16]
 8004a6c:	f8cd a000 	str.w	sl, [sp]
 8004a70:	464b      	mov	r3, r9
 8004a72:	aa03      	add	r2, sp, #12
 8004a74:	4621      	mov	r1, r4
 8004a76:	4640      	mov	r0, r8
 8004a78:	f7ff fee4 	bl	8004844 <_printf_common>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d14a      	bne.n	8004b16 <_printf_i+0x1f6>
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a84:	b004      	add	sp, #16
 8004a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	f043 0320 	orr.w	r3, r3, #32
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	4833      	ldr	r0, [pc, #204]	; (8004b60 <_printf_i+0x240>)
 8004a94:	2778      	movs	r7, #120	; 0x78
 8004a96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	6829      	ldr	r1, [r5, #0]
 8004a9e:	061f      	lsls	r7, r3, #24
 8004aa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aa4:	d402      	bmi.n	8004aac <_printf_i+0x18c>
 8004aa6:	065f      	lsls	r7, r3, #25
 8004aa8:	bf48      	it	mi
 8004aaa:	b2b6      	uxthmi	r6, r6
 8004aac:	07df      	lsls	r7, r3, #31
 8004aae:	bf48      	it	mi
 8004ab0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ab4:	6029      	str	r1, [r5, #0]
 8004ab6:	bf48      	it	mi
 8004ab8:	6023      	strmi	r3, [r4, #0]
 8004aba:	b91e      	cbnz	r6, 8004ac4 <_printf_i+0x1a4>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	f023 0320 	bic.w	r3, r3, #32
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	e7a7      	b.n	8004a18 <_printf_i+0xf8>
 8004ac8:	4824      	ldr	r0, [pc, #144]	; (8004b5c <_printf_i+0x23c>)
 8004aca:	e7e4      	b.n	8004a96 <_printf_i+0x176>
 8004acc:	4615      	mov	r5, r2
 8004ace:	e7bd      	b.n	8004a4c <_printf_i+0x12c>
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	6826      	ldr	r6, [r4, #0]
 8004ad4:	6961      	ldr	r1, [r4, #20]
 8004ad6:	1d18      	adds	r0, r3, #4
 8004ad8:	6028      	str	r0, [r5, #0]
 8004ada:	0635      	lsls	r5, r6, #24
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	d501      	bpl.n	8004ae4 <_printf_i+0x1c4>
 8004ae0:	6019      	str	r1, [r3, #0]
 8004ae2:	e002      	b.n	8004aea <_printf_i+0x1ca>
 8004ae4:	0670      	lsls	r0, r6, #25
 8004ae6:	d5fb      	bpl.n	8004ae0 <_printf_i+0x1c0>
 8004ae8:	8019      	strh	r1, [r3, #0]
 8004aea:	2300      	movs	r3, #0
 8004aec:	6123      	str	r3, [r4, #16]
 8004aee:	4615      	mov	r5, r2
 8004af0:	e7bc      	b.n	8004a6c <_printf_i+0x14c>
 8004af2:	682b      	ldr	r3, [r5, #0]
 8004af4:	1d1a      	adds	r2, r3, #4
 8004af6:	602a      	str	r2, [r5, #0]
 8004af8:	681d      	ldr	r5, [r3, #0]
 8004afa:	6862      	ldr	r2, [r4, #4]
 8004afc:	2100      	movs	r1, #0
 8004afe:	4628      	mov	r0, r5
 8004b00:	f7fb fb86 	bl	8000210 <memchr>
 8004b04:	b108      	cbz	r0, 8004b0a <_printf_i+0x1ea>
 8004b06:	1b40      	subs	r0, r0, r5
 8004b08:	6060      	str	r0, [r4, #4]
 8004b0a:	6863      	ldr	r3, [r4, #4]
 8004b0c:	6123      	str	r3, [r4, #16]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b14:	e7aa      	b.n	8004a6c <_printf_i+0x14c>
 8004b16:	6923      	ldr	r3, [r4, #16]
 8004b18:	462a      	mov	r2, r5
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	4640      	mov	r0, r8
 8004b1e:	47d0      	blx	sl
 8004b20:	3001      	adds	r0, #1
 8004b22:	d0ad      	beq.n	8004a80 <_printf_i+0x160>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	079b      	lsls	r3, r3, #30
 8004b28:	d413      	bmi.n	8004b52 <_printf_i+0x232>
 8004b2a:	68e0      	ldr	r0, [r4, #12]
 8004b2c:	9b03      	ldr	r3, [sp, #12]
 8004b2e:	4298      	cmp	r0, r3
 8004b30:	bfb8      	it	lt
 8004b32:	4618      	movlt	r0, r3
 8004b34:	e7a6      	b.n	8004a84 <_printf_i+0x164>
 8004b36:	2301      	movs	r3, #1
 8004b38:	4632      	mov	r2, r6
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	4640      	mov	r0, r8
 8004b3e:	47d0      	blx	sl
 8004b40:	3001      	adds	r0, #1
 8004b42:	d09d      	beq.n	8004a80 <_printf_i+0x160>
 8004b44:	3501      	adds	r5, #1
 8004b46:	68e3      	ldr	r3, [r4, #12]
 8004b48:	9903      	ldr	r1, [sp, #12]
 8004b4a:	1a5b      	subs	r3, r3, r1
 8004b4c:	42ab      	cmp	r3, r5
 8004b4e:	dcf2      	bgt.n	8004b36 <_printf_i+0x216>
 8004b50:	e7eb      	b.n	8004b2a <_printf_i+0x20a>
 8004b52:	2500      	movs	r5, #0
 8004b54:	f104 0619 	add.w	r6, r4, #25
 8004b58:	e7f5      	b.n	8004b46 <_printf_i+0x226>
 8004b5a:	bf00      	nop
 8004b5c:	08004ce9 	.word	0x08004ce9
 8004b60:	08004cfa 	.word	0x08004cfa

08004b64 <memmove>:
 8004b64:	4288      	cmp	r0, r1
 8004b66:	b510      	push	{r4, lr}
 8004b68:	eb01 0402 	add.w	r4, r1, r2
 8004b6c:	d902      	bls.n	8004b74 <memmove+0x10>
 8004b6e:	4284      	cmp	r4, r0
 8004b70:	4623      	mov	r3, r4
 8004b72:	d807      	bhi.n	8004b84 <memmove+0x20>
 8004b74:	1e43      	subs	r3, r0, #1
 8004b76:	42a1      	cmp	r1, r4
 8004b78:	d008      	beq.n	8004b8c <memmove+0x28>
 8004b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b82:	e7f8      	b.n	8004b76 <memmove+0x12>
 8004b84:	4402      	add	r2, r0
 8004b86:	4601      	mov	r1, r0
 8004b88:	428a      	cmp	r2, r1
 8004b8a:	d100      	bne.n	8004b8e <memmove+0x2a>
 8004b8c:	bd10      	pop	{r4, pc}
 8004b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b96:	e7f7      	b.n	8004b88 <memmove+0x24>

08004b98 <_sbrk_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4d06      	ldr	r5, [pc, #24]	; (8004bb4 <_sbrk_r+0x1c>)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	602b      	str	r3, [r5, #0]
 8004ba4:	f7fb feda 	bl	800095c <_sbrk>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d102      	bne.n	8004bb2 <_sbrk_r+0x1a>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	b103      	cbz	r3, 8004bb2 <_sbrk_r+0x1a>
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	200002e0 	.word	0x200002e0

08004bb8 <memcpy>:
 8004bb8:	440a      	add	r2, r1
 8004bba:	4291      	cmp	r1, r2
 8004bbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004bc0:	d100      	bne.n	8004bc4 <memcpy+0xc>
 8004bc2:	4770      	bx	lr
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bce:	4291      	cmp	r1, r2
 8004bd0:	d1f9      	bne.n	8004bc6 <memcpy+0xe>
 8004bd2:	bd10      	pop	{r4, pc}

08004bd4 <_realloc_r>:
 8004bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd8:	4680      	mov	r8, r0
 8004bda:	4614      	mov	r4, r2
 8004bdc:	460e      	mov	r6, r1
 8004bde:	b921      	cbnz	r1, 8004bea <_realloc_r+0x16>
 8004be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004be4:	4611      	mov	r1, r2
 8004be6:	f7ff bc49 	b.w	800447c <_malloc_r>
 8004bea:	b92a      	cbnz	r2, 8004bf8 <_realloc_r+0x24>
 8004bec:	f7ff fbda 	bl	80043a4 <_free_r>
 8004bf0:	4625      	mov	r5, r4
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bf8:	f000 f81b 	bl	8004c32 <_malloc_usable_size_r>
 8004bfc:	4284      	cmp	r4, r0
 8004bfe:	4607      	mov	r7, r0
 8004c00:	d802      	bhi.n	8004c08 <_realloc_r+0x34>
 8004c02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c06:	d812      	bhi.n	8004c2e <_realloc_r+0x5a>
 8004c08:	4621      	mov	r1, r4
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	f7ff fc36 	bl	800447c <_malloc_r>
 8004c10:	4605      	mov	r5, r0
 8004c12:	2800      	cmp	r0, #0
 8004c14:	d0ed      	beq.n	8004bf2 <_realloc_r+0x1e>
 8004c16:	42bc      	cmp	r4, r7
 8004c18:	4622      	mov	r2, r4
 8004c1a:	4631      	mov	r1, r6
 8004c1c:	bf28      	it	cs
 8004c1e:	463a      	movcs	r2, r7
 8004c20:	f7ff ffca 	bl	8004bb8 <memcpy>
 8004c24:	4631      	mov	r1, r6
 8004c26:	4640      	mov	r0, r8
 8004c28:	f7ff fbbc 	bl	80043a4 <_free_r>
 8004c2c:	e7e1      	b.n	8004bf2 <_realloc_r+0x1e>
 8004c2e:	4635      	mov	r5, r6
 8004c30:	e7df      	b.n	8004bf2 <_realloc_r+0x1e>

08004c32 <_malloc_usable_size_r>:
 8004c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c36:	1f18      	subs	r0, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bfbc      	itt	lt
 8004c3c:	580b      	ldrlt	r3, [r1, r0]
 8004c3e:	18c0      	addlt	r0, r0, r3
 8004c40:	4770      	bx	lr
	...

08004c44 <_init>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr

08004c50 <_fini>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr
